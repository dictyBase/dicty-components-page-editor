{"version":3,"file":"dicty-components-page-editor.esm.js","sources":["../src/components/buttons/MarkButton.tsx","../src/components/buttons/BlockButton.tsx","../src/components/buttons/AlignButton.tsx","../src/components/modals/LinkDialog.tsx","../src/constants/types.ts","../src/components/buttons/LinkButton.tsx","../src/components/icons/BoldIcon.tsx","../src/components/icons/ItalicIcon.tsx","../src/components/icons/StrikethroughIcon.tsx","../src/components/icons/SubscriptIcon.tsx","../src/components/icons/SuperscriptIcon.tsx","../src/components/icons/UnderlinedIcon.tsx","../src/components/icons/H1Icon.tsx","../src/components/icons/H2Icon.tsx","../src/components/icons/H3Icon.tsx","../src/components/icons/LinkIcon.tsx","../src/components/icons/AlignLeftIcon.tsx","../src/components/icons/AlignCenterIcon.tsx","../src/components/icons/AlignRightIcon.tsx","../src/components/icons/AlignJustifyIcon.tsx","../src/components/Toolbar.tsx","../src/components/Element.tsx","../src/components/Leaf.tsx","../src/plugins/withLinks.ts","../src/components/PageEditor.tsx"],"sourcesContent":["import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\n\n/**\n * isMarkActive determines if the current text selection contains an\n * active mark\n */\nconst isMarkActive = (editor: ReactEditor, format: string) => {\n  // get a list of marks from the selected text\n  const marks = Editor.marks(editor)\n\n  // if there are marks for specified format then the mark is active\n  if (marks && marks[format]) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/**\n * toggleMark will either remove or add a mark to the given text selection\n */\nconst toggleMark = (editor: ReactEditor, format: string) => {\n  // first find if the selection's mark is currently active\n  const isActive = isMarkActive(editor, format)\n\n  // we either want to add or remove a mark based on whether it is currently active\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\ntype Props = {\n  /** Type of mark (i.e. \"bold\") */\n  format: string\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * MarkButton displays a button with associated click logic for toggling a mark.\n */\nconst MarkButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the mark within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleMark(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default MarkButton\n","import React, { MouseEvent } from \"react\"\nimport { Editor, Transforms, Element as SlateElement } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\n\n/**\n * PROCESS:\n *\n * 1. User clicks button\n * 2. We run generator function to find any matching nodes for that block type.\n * 3. If there are no matches (value == undefined) then the generator is done\n *    and we do not mark that block as active.\n * 4. If the block is not active, then we set the nodes to match that format type.\n * 5. If the generator does find a match, we mark that block as active for the\n *    first matching node.\n * 6. If the block is active, then we set the nodes back to the default type of\n *    'paragraph'.\n */\n\n/**\n * isBlockActive determines if the current text selection contains an active block\n */\nconst isBlockActive = (editor: ReactEditor, format: string) => {\n  // Editor.nodes returns a generator that iterates through all of the editor's\n  // nodes. We are looking for matches for the selected format.\n  // https://github.com/ianstormtaylor/slate/blob/master/packages/slate/src/interfaces/node.ts#L467\n  const nodeGenerator = Editor.nodes(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\n  })\n  // run the generator to find the nearest match\n  const node = nodeGenerator.next()\n  // if it finds a match then return true to indicate the block is currently\n  // active\n  while (!node.done) {\n    return true\n  }\n  // if it doesn't find a match, then the generator has yielded its last value\n  // meaning that it did not find a match for this block type\n  return false\n}\n\n/**\n * toggleBlock will set the appropriate nodes for the given selection\n */\nconst toggleBlock = (editor: ReactEditor, format: string) => {\n  // first find if the selected block is currently active\n  const isActive = isBlockActive(editor, format)\n\n  // setNodes is used to set properties at the currently selected element.\n  // If the block is active, then we want to toggle it back to the default\n  // paragraph type. If the block is not active, we toggle the type to match it.\n  Transforms.setNodes(editor, {\n    type: isActive ? \"paragraph\" : format,\n  })\n}\n\ntype Props = {\n  /** Type of block (i.e. \"h1\") */\n  format: string\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * BlockButton displays a button with associated click logic for toggling a\n * block.\n */\nconst BlockButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the block within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleBlock(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default BlockButton\n","import React, { MouseEvent } from \"react\"\nimport { Editor, Transforms, Element as SlateElement } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\n\nconst isAlignActive = (editor: ReactEditor, align: string) => {\n  const nodeGenerator = Editor.nodes(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.align === align,\n  })\n\n  // run the generator to find the nearest match\n  // then return true if this is the last value\n  const node = nodeGenerator.next()\n  while (!node.done) {\n    return true\n  }\n  return false\n}\n\nconst toggleAlign = (editor: ReactEditor, align: string) => {\n  const isActive = isAlignActive(editor, align)\n\n  Transforms.setNodes(editor, {\n    align: isActive ? \"left\" : align,\n  })\n}\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n  /** Text alignment property */\n  align: string\n}\n\n/**\n * AlignButton displays a button with associated logic for adding the \"align\"\n * attribute.\n */\nconst AlignButton = ({ icon, align }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the block within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleAlign(editor, align)\n  }\n\n  return (\n    <IconButton\n      size=\"small\"\n      aria-label={`align-${align}`}\n      onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default AlignButton\n","import React from \"react\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport FormGroup from \"@material-ui/core/FormGroup\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\n\ntype Props = {\n  /** Function to call when  */\n  handleClick: (event: React.MouseEvent<HTMLButtonElement>) => void\n  /** Determines if modal is open */\n  linkModalOpen: boolean\n  /** Toggle link modal */\n  setLinkModalOpen: (arg0: boolean) => void\n  /** URL for link */\n  url: string\n  /** Set link URL state */\n  setURL: (arg0: string) => void\n  /** Text for link */\n  text: string\n  /** Set text for link */\n  setText: (arg0: string) => void\n  /** Determines if link is for email */\n  emailChecked: boolean\n  /** Toggle email checkbox */\n  setEmailChecked: (arg0: boolean) => void\n}\n\nconst LinkDialog = ({\n  handleClick,\n  linkModalOpen,\n  setLinkModalOpen,\n  url,\n  setURL,\n  text,\n  setText,\n  emailChecked,\n  setEmailChecked,\n}: Props) => {\n  return (\n    <Dialog\n      open={linkModalOpen}\n      onClose={() => setLinkModalOpen(false)}\n      aria-labelledby=\"link-dialog-title\">\n      <DialogTitle id=\"link-dialog-title\">Link Details</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"url\"\n          label={\"URL\"}\n          type=\"url\"\n          defaultValue={url}\n          onChange={(e) => setURL(e.target.value)}\n          fullWidth\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"text\"\n          label=\"Text\"\n          type=\"text\"\n          defaultValue={text ? text : \"\"}\n          onChange={(e) => setText(e.target.value)}\n          fullWidth\n        />\n        <FormGroup row>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={emailChecked}\n                onChange={() => setEmailChecked(!emailChecked)}\n                value=\"email\"\n              />\n            }\n            label=\"Is this an email link?\"\n          />\n        </FormGroup>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClick} variant=\"contained\" color=\"primary\">\n          Add Link\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default LinkDialog\n","const types = {\n  // marks\n  bold: \"bold\",\n  italic: \"italic\",\n  underline: \"underline\",\n  strikethrough: \"strikethrough\",\n  subscript: \"subscript\",\n  superscript: \"superscript\",\n  // inline\n  link: \"link\",\n  // blocks\n  paragraph: \"paragraph\",\n  h1: \"h1\",\n  h2: \"h2\",\n  h3: \"h3\",\n}\n\nconst alignments = {\n  left: \"left\",\n  center: \"center\",\n  right: \"right\",\n  justify: \"justify\",\n}\n\nexport { types, alignments }\n","import React, { MouseEvent } from \"react\"\nimport { Editor, Transforms, Range, Node, Element as SlateElement } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport LinkDialog from \"../modals/LinkDialog\"\nimport { types } from \"../../constants/types\"\n\n// this config looks for a match of the link type\nconst nodeOptions = {\n  match: (n: Node) =>\n    !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === types.link,\n}\n\nconst isLinkActive = (editor: Editor) => {\n  const nodeGenerator = Editor.nodes(editor, nodeOptions)\n  // run the generator to find the nearest match\n  const node = nodeGenerator.next()\n  // if it finds a match then return true to indicate the link is currently\n  // active\n  while (!node.done) {\n    console.log(node)\n    return true\n  }\n  // if it doesn't find a match, then the generator has yielded its last value\n  // meaning that it did not find a match for this type\n  return false\n}\n\n// unwrap the link from the current selection\nconst unwrapLink = (editor: Editor) => {\n  Transforms.unwrapNodes(editor, nodeOptions)\n}\n\n// wrapLink has all of the logic for wrapping a given selection with\n// an inline link node\nconst wrapLink = (editor: Editor, url: string) => {\n  // first, if the selection is already a link then we want to unwrap it;\n  // this prevents nested links\n  if (isLinkActive(editor)) {\n    unwrapLink(editor)\n  }\n\n  // add variable to determine if the given selection is collapsed;\n  // this means that the user does not have any text actively selected\n  const { selection } = editor\n  const isCollapsed = selection && Range.isCollapsed(selection)\n\n  // define the link data structure\n  // if it is collapsed then we add the url as the text portion of the link\n  const link = {\n    type: types.link,\n    url,\n    children: isCollapsed ? [{ text: url }] : [],\n  }\n\n  if (isCollapsed) {\n    // if there isn't a range selected, insert a new node\n    Transforms.insertNodes(editor, link)\n  } else {\n    // otherwise wrap the node with the link data\n    // split is necessary to only wrap the selection and not the entire block\n    Transforms.wrapNodes(editor, link, { split: true })\n    // and collapse the selection to the end of the node\n    Transforms.collapse(editor, { edge: \"end\" })\n  }\n}\n\nconst insertLink = (editor: Editor, url: string) => {\n  // only insert a link if there is a selection in the editor\n  if (editor.selection) {\n    wrapLink(editor, url)\n  }\n}\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * LinkButton is a button specifically for adding links.\n */\nconst LinkButton = ({ icon }: Props) => {\n  const editor = useSlate()\n  const [linkModalOpen, setLinkModalOpen] = React.useState(false)\n  const [url, setURL] = React.useState(\"\")\n  const [text, setText] = React.useState(\"\")\n  const [emailChecked, setEmailChecked] = React.useState(false)\n\n  const handleToolbarButtonClick = () => {\n    // if expanded...\n    const { selection } = editor\n    if (selection && !Range.isCollapsed(selection)) {\n      const nodeGenerator = Editor.nodes(editor, nodeOptions)\n      const node = nodeGenerator.next()\n      if (node.value && node.value[0].url !== undefined) {\n        // @ts-ignore\n        setURL(node.value[0].url)\n      } else {\n        setURL(\"\")\n      }\n\n      insertLink(editor, url)\n      setText(\"\")\n      setLinkModalOpen(true)\n    } else {\n      setURL(\"\")\n      setText(\"\")\n      setLinkModalOpen(true)\n    }\n  }\n\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    setLinkModalOpen(false)\n    insertLink(editor, url)\n  }\n\n  return (\n    <React.Fragment>\n      <IconButton\n        size=\"small\"\n        aria-label=\"link-button\"\n        onClick={handleToolbarButtonClick}>\n        {icon}\n      </IconButton>\n      <LinkDialog\n        handleClick={handleClick}\n        linkModalOpen={linkModalOpen}\n        setLinkModalOpen={setLinkModalOpen}\n        url={url}\n        setURL={setURL}\n        text={text}\n        setText={setText}\n        emailChecked={emailChecked}\n        setEmailChecked={setEmailChecked}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default LinkButton\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst BoldIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default BoldIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst ItalicIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z\" />\n    </SvgIcon>\n  )\n}\n\nexport default ItalicIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst StrikethroughIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M10 19h4v-3h-4v3zM5 4v3h5v3h4V7h5V4H5zM3 14h18v-2H3v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default StrikethroughIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst SubscriptIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M22,18h-2v1h3v1h-4v-2c0-0.55,0.45-1,1-1h2v-1h-3v-1h3c0.55,0,1,0.45,1,1v1C23,17.55,22.55,18,22,18z M5.88,18h2.66 l3.4-5.42h0.12l3.4,5.42h2.66l-4.65-7.27L17.81,4h-2.68l-3.07,4.99h-0.12L8.85,4H6.19l4.32,6.73L5.88,18z\" />\n    </SvgIcon>\n  )\n}\n\nexport default SubscriptIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst SuperscriptIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M22,7h-2v1h3v1h-4V7c0-0.55,0.45-1,1-1h2V5h-3V4h3c0.55,0,1,0.45,1,1v1C23,6.55,22.55,7,22,7z M5.88,20h2.66l3.4-5.42h0.12 l3.4,5.42h2.66l-4.65-7.27L17.81,6h-2.68l-3.07,4.99h-0.12L8.85,6H6.19l4.32,6.73L5.88,20z\" />\n    </SvgIcon>\n  )\n}\n\nexport default SuperscriptIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst UnderlinedIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default UnderlinedIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H1Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14h-2V9h-2V7h4v10z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H1Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H2Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 8c0 1.11-.9 2-2 2h-2v2h4v2H9v-4c0-1.11.9-2 2-2h2V9H9V7h4c1.1 0 2 .89 2 2v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H2Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H3Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M.01 0h24v24h-24z\" fill=\"none\" />\n      <path d=\"M19.01 3h-14c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 7.5c0 .83-.67 1.5-1.5 1.5.83 0 1.5.67 1.5 1.5V15c0 1.11-.9 2-2 2h-4v-2h4v-2h-2v-2h2V9h-4V7h4c1.1 0 2 .89 2 2v1.5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H3Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst LinkIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default LinkIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignLeftIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignLeftIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignCenterIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignCenterIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignRightIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignRightIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignJustifyIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3 21h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18V7H3v2zm0-6v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignJustifyIcon\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Divider from \"@material-ui/core/Divider\"\nimport MarkButton from \"./buttons/MarkButton\"\nimport BlockButton from \"./buttons/BlockButton\"\nimport AlignButton from \"./buttons/AlignButton\"\nimport LinkButton from \"./buttons/LinkButton\"\n// mark icons\nimport BoldIcon from \"./icons/BoldIcon\"\nimport ItalicIcon from \"./icons/ItalicIcon\"\nimport StrikethroughIcon from \"./icons/StrikethroughIcon\"\nimport SubscriptIcon from \"./icons/SubscriptIcon\"\nimport SuperscriptIcon from \"./icons/SuperscriptIcon\"\nimport UnderlinedIcon from \"./icons/UnderlinedIcon\"\n// block icons\nimport H1Icon from \"./icons/H1Icon\"\nimport H2Icon from \"./icons/H2Icon\"\nimport H3Icon from \"./icons/H3Icon\"\nimport LinkIcon from \"./icons/LinkIcon\"\n// align icons\nimport AlignLeftIcon from \"./icons/AlignLeftIcon\"\nimport AlignCenterIcon from \"./icons/AlignCenterIcon\"\nimport AlignRightIcon from \"./icons/AlignRightIcon\"\nimport AlignJustifyIcon from \"./icons/AlignJustifyIcon\"\n// types\nimport { types, alignments } from \"../constants/types\"\n\nconst useStyles = makeStyles({\n  divider: {\n    marginLeft: \"4px\",\n    marginRight: \"4px\",\n  },\n})\n\n/**\n * Toolbar is the display for the editor toolbar.\n */\nconst EditorToolbar = () => {\n  const classes = useStyles()\n\n  return (\n    <AppBar color=\"default\" position=\"static\">\n      <Toolbar disableGutters variant=\"dense\">\n        <MarkButton format={types.bold} icon={<BoldIcon />} />\n        <MarkButton format={types.italic} icon={<ItalicIcon />} />\n        <MarkButton format={types.underline} icon={<UnderlinedIcon />} />\n        <MarkButton format={types.strikethrough} icon={<StrikethroughIcon />} />\n        <MarkButton format={types.subscript} icon={<SubscriptIcon />} />\n        <MarkButton format={types.superscript} icon={<SuperscriptIcon />} />\n        <Divider className={classes.divider} orientation=\"vertical\" flexItem />\n        <BlockButton format={types.h1} icon={<H1Icon />} />\n        <BlockButton format={types.h2} icon={<H2Icon />} />\n        <BlockButton format={types.h3} icon={<H3Icon />} />\n        <LinkButton icon={<LinkIcon />} />\n        <Divider className={classes.divider} orientation=\"vertical\" flexItem />\n        <AlignButton align={alignments.left} icon={<AlignLeftIcon />} />\n        <AlignButton align={alignments.center} icon={<AlignCenterIcon />} />\n        <AlignButton align={alignments.right} icon={<AlignRightIcon />} />\n        <AlignButton align={alignments.justify} icon={<AlignJustifyIcon />} />\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default EditorToolbar\n","import React from \"react\"\nimport { RenderElementProps } from \"slate-react\"\nimport Typography, { TypographyProps } from \"@material-ui/core/Typography\"\nimport { types } from \"../constants/types\"\n\ninterface ElementProps extends RenderElementProps {\n  element: {\n    /** Type of element to render */\n    type: string\n    /** Text alignment (left, center, right, justify) */\n    align?: TypographyProps[\"align\"]\n    /** URL used for links */\n    url?: string\n    /** Any children to render */\n    children: any\n  }\n}\n\n/**\n * Element is used to render blocks based on a given type.\n */\nconst Element = ({ attributes, children, element }: ElementProps) => {\n  const { type, align = \"left\", url } = element\n\n  switch (type) {\n    case types.h1:\n      return (\n        <Typography variant=\"h1\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.h2:\n      return (\n        <Typography variant=\"h2\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.h3:\n      return (\n        <Typography variant=\"h3\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.link:\n      return (\n        <a href={url} {...attributes}>\n          {children}\n        </a>\n      )\n    default:\n      return (\n        <Typography component=\"p\" variant=\"body1\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n  }\n}\n\nexport default Element\n","import React from \"react\"\nimport { RenderLeafProps } from \"slate-react\"\n\n/**\n * Leaf is used to render text based on a given style.\n *\n * We need to use standard if conditionals and not if/else if because\n * a leaf can have multiple matching properties. If a leaf is both bold\n * and italic, for example, then ultimately this component would render:\n *\n * <span {...attributes}><strong><em>{children}</em></strong></span>\n */\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  if (leaf.strikethrough) {\n    children = <s>{children}</s>\n  }\n\n  if (leaf.subscript) {\n    children = <sub>{children}</sub>\n  }\n\n  if (leaf.superscript) {\n    children = <sup>{children}</sup>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nexport default Leaf\n","import { Editor } from \"slate\"\nimport { types } from \"../constants/types\"\n\nconst withLinks = (editor: Editor) => {\n  const { isInline } = editor\n\n  // make sure every link type is rendered as inline\n  editor.isInline = (element) => {\n    if (element.type === types.link) {\n      return true\n    }\n    return isInline(editor)\n  }\n\n  return editor\n}\n\nexport default withLinks\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport { createEditor, Node } from \"slate\"\nimport { Slate, Editable, withReact } from \"slate-react\"\nimport Toolbar from \"./Toolbar\"\nimport Element from \"./Element\"\nimport Leaf from \"./Leaf\"\nimport withLinks from \"../plugins/withLinks\"\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [{ text: \"A line of text in a paragraph.\" }],\n  },\n]\n\n/**\n * PageEditor is the main editor component.\n */\nconst PageEditor = () => {\n  // create a slate editor object that won't change across renders\n  const editor = useMemo(() => withReact(withLinks(createEditor())), [])\n  // store the value of the editor\n  const [value, setValue] = useState<Node[]>(initialValue)\n  // render expected element based on type passed as props\n  // memoize this function for subsequent renders\n  const renderElement = useCallback((props) => <Element {...props} />, [])\n  // render expected leaf based on type (i.e. bold, italic, etc)\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, [])\n  console.log(value)\n  return (\n    <Slate editor={editor} value={value} onChange={(value) => setValue(value)}>\n      <Toolbar />\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        placeholder=\"Enter some text...\"\n      />\n    </Slate>\n  )\n}\n\nexport default PageEditor\n"],"names":["isMarkActive","editor","format","marks","Editor","toggleMark","isActive","removeMark","addMark","MarkButton","icon","useSlate","handleClick","event","preventDefault","React","IconButton","size","onClick","isBlockActive","nodeGenerator","nodes","match","n","isEditor","SlateElement","isElement","type","node","next","done","toggleBlock","Transforms","setNodes","BlockButton","isAlignActive","align","toggleAlign","AlignButton","LinkDialog","linkModalOpen","setLinkModalOpen","url","setURL","text","setText","emailChecked","setEmailChecked","Dialog","open","onClose","DialogTitle","id","DialogContent","TextField","autoFocus","margin","label","defaultValue","onChange","e","target","value","fullWidth","FormGroup","row","FormControlLabel","control","Checkbox","checked","DialogActions","Button","variant","color","types","bold","italic","underline","strikethrough","subscript","superscript","link","paragraph","h1","h2","h3","alignments","left","center","right","justify","nodeOptions","isLinkActive","console","log","unwrapLink","unwrapNodes","wrapLink","selection","isCollapsed","Range","children","insertNodes","wrapNodes","split","collapse","edge","insertLink","LinkButton","useState","handleToolbarButtonClick","undefined","Fragment","BoldIcon","SvgIcon","d","fill","ItalicIcon","StrikethroughIcon","SubscriptIcon","SuperscriptIcon","UnderlinedIcon","H1Icon","H2Icon","H3Icon","LinkIcon","AlignLeftIcon","AlignCenterIcon","AlignRightIcon","AlignJustifyIcon","useStyles","makeStyles","divider","marginLeft","marginRight","EditorToolbar","classes","AppBar","position","Toolbar","disableGutters","Divider","className","orientation","flexItem","Element","attributes","element","Typography","href","component","Leaf","leaf","withLinks","isInline","initialValue","PageEditor","useMemo","withReact","createEditor","setValue","renderElement","useCallback","props","renderLeaf","Slate","Editable","placeholder"],"mappings":";;;;;;;;;;;;;;;;;;;;AAKA;;;;;AAIA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAsBC,MAAtB;AACnB;AACA,MAAMC,KAAK,GAAGC,MAAM,CAACD,KAAP,CAAaF,MAAb,CAAd;;AAGA,MAAIE,KAAK,IAAIA,KAAK,CAACD,MAAD,CAAlB,EAA4B;AAC1B,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAVD;AAYA;;;;;AAGA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACJ,MAAD,EAAsBC,MAAtB;AACjB;AACA,MAAMI,QAAQ,GAAGN,YAAY,CAACC,MAAD,EAASC,MAAT,CAA7B;;AAGA,MAAII,QAAJ,EAAc;AACZF,IAAAA,MAAM,CAACG,UAAP,CAAkBN,MAAlB,EAA0BC,MAA1B;AACD,GAFD,MAEO;AACLE,IAAAA,MAAM,CAACI,OAAP,CAAeP,MAAf,EAAuBC,MAAvB,EAA+B,IAA/B;AACD;AACF,CAVD;AAmBA;;;;;AAGA,IAAMO,UAAU,GAAG,SAAbA,UAAa;MAAGP,cAAAA;MAAQQ,YAAAA;AAC5B,MAAMT,MAAM,GAAGU,QAAQ,EAAvB;;AAGA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAClBA,IAAAA,KAAK,CAACC,cAAN;AACAT,IAAAA,UAAU,CAACJ,MAAD,EAASC,MAAT,CAAV;AACD,GAHD;;AAKA,SACEa,mBAAA,CAACC,UAAD;AAAYC,IAAAA,IAAI,EAAC;AAAQC,IAAAA,OAAO,EAAEN;GAAlC,EACGF,IADH,CADF;AAKD,CAdD;;ACzCA;;;;;;;;;;;;;;AAcA;;;;AAGA,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAAClB,MAAD,EAAsBC,MAAtB;AACpB;AACA;AACA;AACA,MAAMkB,aAAa,GAAGhB,MAAM,CAACiB,KAAP,CAAapB,MAAb,EAAqB;AACzCqB,IAAAA,KAAK,EAAE,eAACC,CAAD;AAAA,aACL,CAACnB,MAAM,CAACoB,QAAP,CAAgBD,CAAhB,CAAD,IAAuBE,SAAY,CAACC,SAAb,CAAuBH,CAAvB,CAAvB,IAAoDA,CAAC,CAACI,IAAF,KAAWzB,MAD1D;AAAA;AADkC,GAArB,CAAtB;;AAKA,MAAM0B,IAAI,GAAGR,aAAa,CAACS,IAAd,EAAb;AAEA;;AACA,SAAO,CAACD,IAAI,CAACE,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;AAED;;;AACA,SAAO,KAAP;AACD,CAlBD;AAoBA;;;;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAC9B,MAAD,EAAsBC,MAAtB;AAClB;AACA,MAAMI,QAAQ,GAAGa,aAAa,CAAClB,MAAD,EAASC,MAAT,CAA9B;AAGA;AACA;;AACA8B,EAAAA,UAAU,CAACC,QAAX,CAAoBhC,MAApB,EAA4B;AAC1B0B,IAAAA,IAAI,EAAErB,QAAQ,GAAG,WAAH,GAAiBJ;AADL,GAA5B;AAGD,CAVD;AAmBA;;;;;;AAIA,IAAMgC,WAAW,GAAG,SAAdA,WAAc;MAAGhC,cAAAA;MAAQQ,YAAAA;AAC7B,MAAMT,MAAM,GAAGU,QAAQ,EAAvB;;AAGA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAClBA,IAAAA,KAAK,CAACC,cAAN;AACAiB,IAAAA,WAAW,CAAC9B,MAAD,EAASC,MAAT,CAAX;AACD,GAHD;;AAKA,SACEa,mBAAA,CAACC,UAAD;AAAYC,IAAAA,IAAI,EAAC;AAAQC,IAAAA,OAAO,EAAEN;GAAlC,EACGF,IADH,CADF;AAKD,CAdD;;AC/DA,IAAMyB,aAAa,GAAG,SAAhBA,aAAgB,CAAClC,MAAD,EAAsBmC,KAAtB;AACpB,MAAMhB,aAAa,GAAGhB,MAAM,CAACiB,KAAP,CAAapB,MAAb,EAAqB;AACzCqB,IAAAA,KAAK,EAAE,eAACC,CAAD;AAAA,aACL,CAACnB,MAAM,CAACoB,QAAP,CAAgBD,CAAhB,CAAD,IAAuBE,SAAY,CAACC,SAAb,CAAuBH,CAAvB,CAAvB,IAAoDA,CAAC,CAACa,KAAF,KAAYA,KAD3D;AAAA;AADkC,GAArB,CAAtB;AAMA;;AACA,MAAMR,IAAI,GAAGR,aAAa,CAACS,IAAd,EAAb;;AACA,SAAO,CAACD,IAAI,CAACE,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAbD;;AAeA,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAACpC,MAAD,EAAsBmC,KAAtB;AAClB,MAAM9B,QAAQ,GAAG6B,aAAa,CAAClC,MAAD,EAASmC,KAAT,CAA9B;AAEAJ,EAAAA,UAAU,CAACC,QAAX,CAAoBhC,MAApB,EAA4B;AAC1BmC,IAAAA,KAAK,EAAE9B,QAAQ,GAAG,MAAH,GAAY8B;AADD,GAA5B;AAGD,CAND;AAeA;;;;;;AAIA,IAAME,WAAW,GAAG,SAAdA,WAAc;MAAG5B,YAAAA;MAAM0B,aAAAA;AAC3B,MAAMnC,MAAM,GAAGU,QAAQ,EAAvB;;AAGA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAClBA,IAAAA,KAAK,CAACC,cAAN;AACAuB,IAAAA,WAAW,CAACpC,MAAD,EAASmC,KAAT,CAAX;AACD,GAHD;;AAKA,SACErB,mBAAA,CAACC,UAAD;AACEC,IAAAA,IAAI,EAAC;6BACgBmB;AACrBlB,IAAAA,OAAO,EAAEN;GAHX,EAIGF,IAJH,CADF;AAQD,CAjBD;;ACPA,IAAM6B,UAAU,GAAG,SAAbA,UAAa;MACjB3B,mBAAAA;MACA4B,qBAAAA;MACAC,wBAAAA;MACAC,WAAAA;MACAC,cAAAA;MACAC,YAAAA;MACAC,eAAAA;MACAC,oBAAAA;MACAC,uBAAAA;AAEA,SACEhC,mBAAA,CAACiC,MAAD;AACEC,IAAAA,IAAI,EAAET;AACNU,IAAAA,OAAO,EAAE;AAAA,aAAMT,gBAAgB,CAAC,KAAD,CAAtB;AAAA;uBACO;GAHlB,EAIE1B,mBAAA,CAACoC,WAAD;AAAaC,IAAAA,EAAE,EAAC;GAAhB,gBAAA,CAJF,EAKErC,mBAAA,CAACsC,aAAD,MAAA,EACEtC,mBAAA,CAACuC,SAAD;AACEC,IAAAA,SAAS;AACTC,IAAAA,MAAM,EAAC;AACPJ,IAAAA,EAAE,EAAC;AACHK,IAAAA,KAAK,EAAE;AACP9B,IAAAA,IAAI,EAAC;AACL+B,IAAAA,YAAY,EAAEhB;AACdiB,IAAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,aAAOjB,MAAM,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AAAA;AACVC,IAAAA,SAAS;GARX,CADF,EAWEhD,mBAAA,CAACuC,SAAD;AACEE,IAAAA,MAAM,EAAC;AACPJ,IAAAA,EAAE,EAAC;AACHK,IAAAA,KAAK,EAAC;AACN9B,IAAAA,IAAI,EAAC;AACL+B,IAAAA,YAAY,EAAEd,IAAI,GAAGA,IAAH,GAAU;AAC5Be,IAAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,aAAOf,OAAO,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AAAA;AACVC,IAAAA,SAAS;GAPX,CAXF,EAoBEhD,mBAAA,CAACiD,SAAD;AAAWC,IAAAA,GAAG;GAAd,EACElD,mBAAA,CAACmD,gBAAD;AACEC,IAAAA,OAAO,EACLpD,mBAAA,CAACqD,QAAD;AACEC,MAAAA,OAAO,EAAEvB;AACTa,MAAAA,QAAQ,EAAE;AAAA,eAAMZ,eAAe,CAAC,CAACD,YAAF,CAArB;AAAA;AACVgB,MAAAA,KAAK,EAAC;KAHR;AAMFL,IAAAA,KAAK,EAAC;GARR,CADF,CApBF,CALF,EAsCE1C,mBAAA,CAACuD,aAAD,MAAA,EACEvD,mBAAA,CAACwD,MAAD;AAAQrD,IAAAA,OAAO,EAAEN;AAAa4D,IAAAA,OAAO,EAAC;AAAYC,IAAAA,KAAK,EAAC;GAAxD,YAAA,CADF,CAtCF,CADF;AA8CD,CAzDD;;AChCA,IAAMC,KAAK,GAAG;AACZ;AACAC,EAAAA,IAAI,EAAE,MAFM;AAGZC,EAAAA,MAAM,EAAE,QAHI;AAIZC,EAAAA,SAAS,EAAE,WAJC;AAKZC,EAAAA,aAAa,EAAE,eALH;AAMZC,EAAAA,SAAS,EAAE,WANC;AAOZC,EAAAA,WAAW,EAAE,aAPD;AAQZ;AACAC,EAAAA,IAAI,EAAE,MATM;AAUZ;AACAC,EAAAA,SAAS,EAAE,WAXC;AAYZC,EAAAA,EAAE,EAAE,IAZQ;AAaZC,EAAAA,EAAE,EAAE,IAbQ;AAcZC,EAAAA,EAAE,EAAE;AAdQ,CAAd;AAiBA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE,MADW;AAEjBC,EAAAA,MAAM,EAAE,QAFS;AAGjBC,EAAAA,KAAK,EAAE,OAHU;AAIjBC,EAAAA,OAAO,EAAE;AAJQ,CAAnB;;ACTA,IAAMC,WAAW,GAAG;AAClBrE,EAAAA,KAAK,EAAE,eAACC,CAAD;AAAA,WACL,CAACnB,MAAM,CAACoB,QAAP,CAAgBD,CAAhB,CAAD,IAAuBE,SAAY,CAACC,SAAb,CAAuBH,CAAvB,CAAvB,IAAoDA,CAAC,CAACI,IAAF,KAAW+C,KAAK,CAACO,IADhE;AAAA;AADW,CAApB;;AAKA,IAAMW,YAAY,GAAG,SAAfA,YAAe,CAAC3F,MAAD;AACnB,MAAMmB,aAAa,GAAGhB,MAAM,CAACiB,KAAP,CAAapB,MAAb,EAAqB0F,WAArB,CAAtB;;AAEA,MAAM/D,IAAI,GAAGR,aAAa,CAACS,IAAd,EAAb;AAEA;;AACA,SAAO,CAACD,IAAI,CAACE,IAAb,EAAmB;AACjB+D,IAAAA,OAAO,CAACC,GAAR,CAAYlE,IAAZ;AACA,WAAO,IAAP;AACD;AAED;;;AACA,SAAO,KAAP;AACD,CAbD;;;AAgBA,IAAMmE,UAAU,GAAG,SAAbA,UAAa,CAAC9F,MAAD;AACjB+B,EAAAA,UAAU,CAACgE,WAAX,CAAuB/F,MAAvB,EAA+B0F,WAA/B;AACD,CAFD;AAKA;;;AACA,IAAMM,QAAQ,GAAG,SAAXA,QAAW,CAAChG,MAAD,EAAiByC,GAAjB;AACf;AACA;AACA,MAAIkD,YAAY,CAAC3F,MAAD,CAAhB,EAA0B;AACxB8F,IAAAA,UAAU,CAAC9F,MAAD,CAAV;AACD;AAGD;;;MACQiG,YAAcjG,OAAdiG;AACR,MAAMC,WAAW,GAAGD,SAAS,IAAIE,KAAK,CAACD,WAAN,CAAkBD,SAAlB,CAAjC;AAGA;;AACA,MAAMjB,IAAI,GAAG;AACXtD,IAAAA,IAAI,EAAE+C,KAAK,CAACO,IADD;AAEXvC,IAAAA,GAAG,EAAHA,GAFW;AAGX2D,IAAAA,QAAQ,EAAEF,WAAW,GAAG,CAAC;AAAEvD,MAAAA,IAAI,EAAEF;AAAR,KAAD,CAAH,GAAqB;AAH/B,GAAb;;AAMA,MAAIyD,WAAJ,EAAiB;AACf;AACAnE,IAAAA,UAAU,CAACsE,WAAX,CAAuBrG,MAAvB,EAA+BgF,IAA/B;AACD,GAHD,MAGO;AACL;AACA;AACAjD,IAAAA,UAAU,CAACuE,SAAX,CAAqBtG,MAArB,EAA6BgF,IAA7B,EAAmC;AAAEuB,MAAAA,KAAK,EAAE;AAAT,KAAnC,EAHK;;AAKLxE,IAAAA,UAAU,CAACyE,QAAX,CAAoBxG,MAApB,EAA4B;AAAEyG,MAAAA,IAAI,EAAE;AAAR,KAA5B;AACD;AACF,CA9BD;;AAgCA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAC1G,MAAD,EAAiByC,GAAjB;AACjB;AACA,MAAIzC,MAAM,CAACiG,SAAX,EAAsB;AACpBD,IAAAA,QAAQ,CAAChG,MAAD,EAASyC,GAAT,CAAR;AACD;AACF,CALD;AAYA;;;;;AAGA,IAAMkE,UAAU,GAAG,SAAbA,UAAa;MAAGlG,YAAAA;AACpB,MAAMT,MAAM,GAAGU,QAAQ,EAAvB;;wBAC0CI,KAAK,CAAC8F,QAAN,CAAe,KAAf;MAAnCrE;MAAeC;;yBACA1B,KAAK,CAAC8F,QAAN,CAAe,EAAf;MAAfnE;MAAKC;;yBACY5B,KAAK,CAAC8F,QAAN,CAAe,EAAf;MAAjBjE;MAAMC;;yBAC2B9B,KAAK,CAAC8F,QAAN,CAAe,KAAf;MAAjC/D;MAAcC;;AAErB,MAAM+D,wBAAwB,GAAG,SAA3BA,wBAA2B;AAC/B;QACQZ,YAAcjG,OAAdiG;;AACR,QAAIA,SAAS,IAAI,CAACE,KAAK,CAACD,WAAN,CAAkBD,SAAlB,CAAlB,EAAgD;AAC9C,UAAM9E,aAAa,GAAGhB,MAAM,CAACiB,KAAP,CAAapB,MAAb,EAAqB0F,WAArB,CAAtB;AACA,UAAM/D,IAAI,GAAGR,aAAa,CAACS,IAAd,EAAb;;AACA,UAAID,IAAI,CAACkC,KAAL,IAAclC,IAAI,CAACkC,KAAL,CAAW,CAAX,EAAcpB,GAAd,KAAsBqE,SAAxC,EAAmD;AACjD;AACApE,QAAAA,MAAM,CAACf,IAAI,CAACkC,KAAL,CAAW,CAAX,EAAcpB,GAAf,CAAN;AACD,OAHD,MAGO;AACLC,QAAAA,MAAM,CAAC,EAAD,CAAN;AACD;;AAEDgE,MAAAA,UAAU,CAAC1G,MAAD,EAASyC,GAAT,CAAV;AACAG,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAJ,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KAbD,MAaO;AACLE,MAAAA,MAAM,CAAC,EAAD,CAAN;AACAE,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAJ,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,GArBD;;AAuBA,MAAM7B,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAClBA,IAAAA,KAAK,CAACC,cAAN;AACA2B,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAkE,IAAAA,UAAU,CAAC1G,MAAD,EAASyC,GAAT,CAAV;AACD,GAJD;;AAMA,SACE3B,mBAAA,CAACA,KAAK,CAACiG,QAAP,MAAA,EACEjG,mBAAA,CAACC,UAAD;AACEC,IAAAA,IAAI,EAAC;kBACM;AACXC,IAAAA,OAAO,EAAE4F;GAHX,EAIGpG,IAJH,CADF,EAOEK,mBAAA,CAACwB,UAAD;AACE3B,IAAAA,WAAW,EAAEA;AACb4B,IAAAA,aAAa,EAAEA;AACfC,IAAAA,gBAAgB,EAAEA;AAClBC,IAAAA,GAAG,EAAEA;AACLC,IAAAA,MAAM,EAAEA;AACRC,IAAAA,IAAI,EAAEA;AACNC,IAAAA,OAAO,EAAEA;AACTC,IAAAA,YAAY,EAAEA;AACdC,IAAAA,eAAe,EAAEA;GATnB,CAPF,CADF;AAqBD,CAzDD;;AC/EA,IAAMkE,QAAQ,GAAG,SAAXA,QAAW;AACf,SACElG,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAME,UAAU,GAAG,SAAbA,UAAa;AACjB,SACEtG,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB;AACxB,SACEvG,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMI,aAAa,GAAG,SAAhBA,aAAgB;AACpB,SACExG,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CADF,CADF;AAKD,CAND;;ACAA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB;AACtB,SACEzG,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CADF,CADF;AAKD,CAND;;ACAA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB;AACrB,SACE1G,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMO,MAAM,GAAG,SAATA,MAAS;AACb,SACE3G,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMQ,MAAM,GAAG,SAATA,MAAS;AACb,SACE5G,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMS,MAAM,GAAG,SAATA,MAAS;AACb,SACE7G,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAoBC,IAAAA,IAAI,EAAC;GAAjC,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMU,QAAQ,GAAG,SAAXA,QAAW;AACf,SACE9G,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMW,aAAa,GAAG,SAAhBA,aAAgB;AACpB,SACE/G,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMY,eAAe,GAAG,SAAlBA,eAAkB;AACtB,SACEhH,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMa,cAAc,GAAG,SAAjBA,cAAiB;AACrB,SACEjH,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMc,gBAAgB,GAAG,SAAnBA,gBAAmB;AACvB,SACElH,mBAAA,CAACmG,OAAD,MAAA,EACEnG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEErG,mBAAA,OAAA;AAAMoG,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;AC0BA,IAAMe,SAAS,gBAAGC,UAAU,CAAC;AAC3BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE,KADL;AAEPC,IAAAA,WAAW,EAAE;AAFN;AADkB,CAAD,CAA5B;AAOA;;;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AACpB,MAAMC,OAAO,GAAGN,SAAS,EAAzB;AAEA,SACEnH,mBAAA,CAAC0H,MAAD;AAAQhE,IAAAA,KAAK,EAAC;AAAUiE,IAAAA,QAAQ,EAAC;GAAjC,EACE3H,mBAAA,CAAC4H,OAAD;AAASC,IAAAA,cAAc;AAACpE,IAAAA,OAAO,EAAC;GAAhC,EACEzD,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAEwE,KAAK,CAACC;AAAMjE,IAAAA,IAAI,EAAEK,mBAAA,CAACkG,QAAD,MAAA;GAAtC,CADF,EAEElG,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAEwE,KAAK,CAACE;AAAQlE,IAAAA,IAAI,EAAEK,mBAAA,CAACsG,UAAD,MAAA;GAAxC,CAFF,EAGEtG,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAEwE,KAAK,CAACG;AAAWnE,IAAAA,IAAI,EAAEK,mBAAA,CAAC0G,cAAD,MAAA;GAA3C,CAHF,EAIE1G,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAEwE,KAAK,CAACI;AAAepE,IAAAA,IAAI,EAAEK,mBAAA,CAACuG,iBAAD,MAAA;GAA/C,CAJF,EAKEvG,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAEwE,KAAK,CAACK;AAAWrE,IAAAA,IAAI,EAAEK,mBAAA,CAACwG,aAAD,MAAA;GAA3C,CALF,EAMExG,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAEwE,KAAK,CAACM;AAAatE,IAAAA,IAAI,EAAEK,mBAAA,CAACyG,eAAD,MAAA;GAA7C,CANF,EAOEzG,mBAAA,CAAC8H,OAAD;AAASC,IAAAA,SAAS,EAAEN,OAAO,CAACJ;AAASW,IAAAA,WAAW,EAAC;AAAWC,IAAAA,QAAQ;GAApE,CAPF,EAQEjI,mBAAA,CAACmB,WAAD;AAAahC,IAAAA,MAAM,EAAEwE,KAAK,CAACS;AAAIzE,IAAAA,IAAI,EAAEK,mBAAA,CAAC2G,MAAD,MAAA;GAArC,CARF,EASE3G,mBAAA,CAACmB,WAAD;AAAahC,IAAAA,MAAM,EAAEwE,KAAK,CAACU;AAAI1E,IAAAA,IAAI,EAAEK,mBAAA,CAAC4G,MAAD,MAAA;GAArC,CATF,EAUE5G,mBAAA,CAACmB,WAAD;AAAahC,IAAAA,MAAM,EAAEwE,KAAK,CAACW;AAAI3E,IAAAA,IAAI,EAAEK,mBAAA,CAAC6G,MAAD,MAAA;GAArC,CAVF,EAWE7G,mBAAA,CAAC6F,UAAD;AAAYlG,IAAAA,IAAI,EAAEK,mBAAA,CAAC8G,QAAD,MAAA;GAAlB,CAXF,EAYE9G,mBAAA,CAAC8H,OAAD;AAASC,IAAAA,SAAS,EAAEN,OAAO,CAACJ;AAASW,IAAAA,WAAW,EAAC;AAAWC,IAAAA,QAAQ;GAApE,CAZF,EAaEjI,mBAAA,CAACuB,WAAD;AAAaF,IAAAA,KAAK,EAAEkD,UAAU,CAACC;AAAM7E,IAAAA,IAAI,EAAEK,mBAAA,CAAC+G,aAAD,MAAA;GAA3C,CAbF,EAcE/G,mBAAA,CAACuB,WAAD;AAAaF,IAAAA,KAAK,EAAEkD,UAAU,CAACE;AAAQ9E,IAAAA,IAAI,EAAEK,mBAAA,CAACgH,eAAD,MAAA;GAA7C,CAdF,EAeEhH,mBAAA,CAACuB,WAAD;AAAaF,IAAAA,KAAK,EAAEkD,UAAU,CAACG;AAAO/E,IAAAA,IAAI,EAAEK,mBAAA,CAACiH,cAAD,MAAA;GAA5C,CAfF,EAgBEjH,mBAAA,CAACuB,WAAD;AAAaF,IAAAA,KAAK,EAAEkD,UAAU,CAACI;AAAShF,IAAAA,IAAI,EAAEK,mBAAA,CAACkH,gBAAD,MAAA;GAA9C,CAhBF,CADF,CADF;AAsBD,CAzBD;;ACrBA;;;;AAGA,IAAMgB,OAAO,GAAG,SAAVA,OAAU;MAAGC,kBAAAA;MAAY7C,gBAAAA;MAAU8C,eAAAA;MAC/BxH,OAA8BwH,QAA9BxH;uBAA8BwH,QAAxB/G;MAAAA,oCAAQ;MAAQM,MAAQyG,QAARzG;;AAE9B,UAAQf,IAAR;AACE,SAAK+C,KAAK,CAACS,EAAX;AACE,aACEpE,mBAAA,CAACqI,UAAD;AAAY5E,QAAAA,OAAO,EAAC;AAAKpC,QAAAA,KAAK,EAAEA;SAAW8G,WAA3C,EACG7C,QADH,CADF;;AAKF,SAAK3B,KAAK,CAACU,EAAX;AACE,aACErE,mBAAA,CAACqI,UAAD;AAAY5E,QAAAA,OAAO,EAAC;AAAKpC,QAAAA,KAAK,EAAEA;SAAW8G,WAA3C,EACG7C,QADH,CADF;;AAKF,SAAK3B,KAAK,CAACW,EAAX;AACE,aACEtE,mBAAA,CAACqI,UAAD;AAAY5E,QAAAA,OAAO,EAAC;AAAKpC,QAAAA,KAAK,EAAEA;SAAW8G,WAA3C,EACG7C,QADH,CADF;;AAKF,SAAK3B,KAAK,CAACO,IAAX;AACE,aACElE,mBAAA,IAAA;AAAGsI,QAAAA,IAAI,EAAE3G;SAASwG,WAAlB,EACG7C,QADH,CADF;;AAKF;AACE,aACEtF,mBAAA,CAACqI,UAAD;AAAYE,QAAAA,SAAS,EAAC;AAAI9E,QAAAA,OAAO,EAAC;AAAQpC,QAAAA,KAAK,EAAEA;SAAW8G,WAA5D,EACG7C,QADH,CADF;AA1BJ;AAgCD,CAnCD;;AClBA;;;;;;;;;;AASA,IAAMkD,IAAI,GAAG,SAAPA,IAAO;MAAGL,kBAAAA;MAAY7C,gBAAAA;MAAUmD,YAAAA;;AACpC,MAAIA,IAAI,CAAC7E,IAAT,EAAe;AACb0B,IAAAA,QAAQ,GAAGtF,mBAAA,SAAA,MAAA,EAASsF,QAAT,CAAX;AACD;;AAED,MAAImD,IAAI,CAAC5E,MAAT,EAAiB;AACfyB,IAAAA,QAAQ,GAAGtF,mBAAA,KAAA,MAAA,EAAKsF,QAAL,CAAX;AACD;;AAED,MAAImD,IAAI,CAAC3E,SAAT,EAAoB;AAClBwB,IAAAA,QAAQ,GAAGtF,mBAAA,IAAA,MAAA,EAAIsF,QAAJ,CAAX;AACD;;AAED,MAAImD,IAAI,CAAC1E,aAAT,EAAwB;AACtBuB,IAAAA,QAAQ,GAAGtF,mBAAA,IAAA,MAAA,EAAIsF,QAAJ,CAAX;AACD;;AAED,MAAImD,IAAI,CAACzE,SAAT,EAAoB;AAClBsB,IAAAA,QAAQ,GAAGtF,mBAAA,MAAA,MAAA,EAAMsF,QAAN,CAAX;AACD;;AAED,MAAImD,IAAI,CAACxE,WAAT,EAAsB;AACpBqB,IAAAA,QAAQ,GAAGtF,mBAAA,MAAA,MAAA,EAAMsF,QAAN,CAAX;AACD;;AAED,SAAOtF,mBAAA,OAAA,oBAAUmI,WAAV,EAAuB7C,QAAvB,CAAP;AACD,CA1BD;;ACTA,IAAMoD,SAAS,GAAG,SAAZA,SAAY,CAACxJ,MAAD;MACRyJ,WAAazJ,OAAbyJ;;AAGRzJ,EAAAA,MAAM,CAACyJ,QAAP,GAAkB,UAACP,OAAD;AAChB,QAAIA,OAAO,CAACxH,IAAR,KAAiB+C,KAAK,CAACO,IAA3B,EAAiC;AAC/B,aAAO,IAAP;AACD;;AACD,WAAOyE,QAAQ,CAACzJ,MAAD,CAAf;AACD,GALD;;AAOA,SAAOA,MAAP;AACD,CAZD;;ACKA,IAAM0J,YAAY,GAAG,CACnB;AACEhI,EAAAA,IAAI,EAAE,WADR;AAEE0E,EAAAA,QAAQ,EAAE,CAAC;AAAEzD,IAAAA,IAAI,EAAE;AAAR,GAAD;AAFZ,CADmB,CAArB;AAOA;;;;AAGA,IAAMgH,UAAU,GAAG,SAAbA,UAAa;AACjB;AACA,MAAM3J,MAAM,GAAG4J,OAAO,CAAC;AAAA,WAAMC,SAAS,CAACL,SAAS,CAACM,YAAY,EAAb,CAAV,CAAf;AAAA,GAAD,EAA6C,EAA7C,CAAtB;;kBAE0BlD,QAAQ,CAAS8C,YAAT;MAA3B7F;MAAOkG;AAEd;;;AACA,MAAMC,aAAa,GAAGC,WAAW,CAAC,UAACC,KAAD;AAAA,WAAWpJ,mBAAA,CAACkI,OAAD,oBAAakB,MAAb,CAAX;AAAA,GAAD,EAAoC,EAApC,CAAjC;;AAEA,MAAMC,UAAU,GAAGF,WAAW,CAAC,UAACC,KAAD;AAAA,WAAWpJ,mBAAA,CAACwI,IAAD,oBAAUY,MAAV,CAAX;AAAA,GAAD,EAAiC,EAAjC,CAA9B;AACAtE,EAAAA,OAAO,CAACC,GAAR,CAAYhC,KAAZ;AACA,SACE/C,mBAAA,CAACsJ,KAAD;AAAOpK,IAAAA,MAAM,EAAEA;AAAQ6D,IAAAA,KAAK,EAAEA;AAAOH,IAAAA,QAAQ,EAAE,kBAACG,KAAD;AAAA,aAAWkG,QAAQ,CAAClG,KAAD,CAAnB;AAAA;GAA/C,EACE/C,mBAAA,CAAC4H,aAAD,MAAA,CADF,EAEE5H,mBAAA,CAACuJ,QAAD;AACEL,IAAAA,aAAa,EAAEA;AACfG,IAAAA,UAAU,EAAEA;AACZG,IAAAA,WAAW,EAAC;GAHd,CAFF,CADF;AAUD,CArBD;;;;"}
{"version":3,"file":"dicty-components-page-editor.esm.js","sources":["../src/components/buttons/MarkButton.tsx","../src/components/buttons/BlockButton.tsx","../src/components/icons/BoldIcon.tsx","../src/components/icons/H1Icon.tsx","../src/components/icons/H2Icon.tsx","../src/components/icons/ItalicIcon.tsx","../src/components/icons/StrikethroughIcon.tsx","../src/components/icons/SubscriptIcon.tsx","../src/components/icons/SuperscriptIcon.tsx","../src/components/icons/UnderlinedIcon.tsx","../src/components/Toolbar.tsx","../src/components/Element.tsx","../src/components/Leaf.tsx","../src/components/PageEditor.tsx"],"sourcesContent":["import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { MarkFormat } from \"../../types\"\n\n/**\n * isMarkActive determines if the current text selection contains an\n * active mark\n */\nconst isMarkActive = (editor: ReactEditor, format: MarkFormat) => {\n  // get a list of marks from the selected text\n  const marks = Editor.marks(editor)\n\n  // if there are marks for specified format then the mark is active\n  if (marks && marks[format]) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/**\n * toggleMark will either remove or add a mark to the given text selection\n */\nconst toggleMark = (editor: ReactEditor, format: MarkFormat) => {\n  // first find if the selection's mark is currently active\n  const isActive = isMarkActive(editor, format)\n\n  // we either want to add or remove a mark based on whether it is currently active\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\ntype Props = {\n  /** Type of mark */\n  format: MarkFormat\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * MarkButton displays a button with associated click logic for toggling a mark.\n */\nconst MarkButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the mark within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleMark(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default MarkButton\n","import React, { MouseEvent } from \"react\"\nimport { Editor, Transforms, Element as SlateElement } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { BlockFormat } from \"../../types\"\n\n/**\n * PROCESS:\n *\n * 1. User clicks button\n * 2. We run generator function to find any matching nodes for that block type.\n * 3. If there are no matches (value == undefined) then the generator is done\n *    and we do not mark that block as active.\n * 4. If the block is not active, then we set the nodes to match that format type.\n * 5. If the generator does find a match, we mark that block as active for the\n *    first matching node.\n * 6. If the block is active, then we set the nodes back to the default type of\n *    'paragraph'.\n */\n\n/**\n * isBlockActive determines if the current text selection contains an active block\n */\nconst isBlockActive = (editor: ReactEditor, format: BlockFormat) => {\n  // Editor.nodes returns a generator that iterates through all of the editor's\n  // nodes. We are looking for matches for the selected format.\n  // https://github.com/ianstormtaylor/slate/blob/master/packages/slate/src/interfaces/node.ts#L467\n  const nodeGenerator = Editor.nodes(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\n  })\n\n  // run the generator to find the nearest match\n  // then return true if this is the last value\n  const node = nodeGenerator.next()\n  while (!node.done) {\n    return true\n  }\n  return false\n}\n\n/**\n * toggleBlock will set the appropriate nodes for the given selection\n */\nconst toggleBlock = (editor: ReactEditor, format: BlockFormat) => {\n  // first find if the selected block is currently active\n  const isActive = isBlockActive(editor, format)\n\n  // Transforms provides helper functions to interact with the document.\n  // setNodes is used to set properties at the specified location.\n  // Here we are setting the type as paragraph if the block is active for the\n  // given format, otherwise we set it as the format.\n  Transforms.setNodes(editor, {\n    type: isActive ? \"paragraph\" : format,\n  })\n}\n\ntype Props = {\n  /** Type of block */\n  format: BlockFormat\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * BlockButton displays a button with associated click logic for toggling a block.\n */\nconst BlockButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the block within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleBlock(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default BlockButton\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst BoldIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default BoldIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H1Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14h-2V9h-2V7h4v10z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H1Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H2Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 8c0 1.11-.9 2-2 2h-2v2h4v2H9v-4c0-1.11.9-2 2-2h2V9H9V7h4c1.1 0 2 .89 2 2v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H2Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst ItalicIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z\" />\n    </SvgIcon>\n  )\n}\n\nexport default ItalicIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst StrikethroughIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M10 19h4v-3h-4v3zM5 4v3h5v3h4V7h5V4H5zM3 14h18v-2H3v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default StrikethroughIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst SubscriptIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M22,18h-2v1h3v1h-4v-2c0-0.55,0.45-1,1-1h2v-1h-3v-1h3c0.55,0,1,0.45,1,1v1C23,17.55,22.55,18,22,18z M5.88,18h2.66 l3.4-5.42h0.12l3.4,5.42h2.66l-4.65-7.27L17.81,4h-2.68l-3.07,4.99h-0.12L8.85,4H6.19l4.32,6.73L5.88,18z\" />\n    </SvgIcon>\n  )\n}\n\nexport default SubscriptIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst SuperscriptIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M22,7h-2v1h3v1h-4V7c0-0.55,0.45-1,1-1h2V5h-3V4h3c0.55,0,1,0.45,1,1v1C23,6.55,22.55,7,22,7z M5.88,20h2.66l3.4-5.42h0.12 l3.4,5.42h2.66l-4.65-7.27L17.81,6h-2.68l-3.07,4.99h-0.12L8.85,6H6.19l4.32,6.73L5.88,20z\" />\n    </SvgIcon>\n  )\n}\n\nexport default SuperscriptIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst UnderlinedIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default UnderlinedIcon\n","import React from \"react\"\nimport MarkButton from \"./buttons/MarkButton\"\nimport BlockButton from \"./buttons/BlockButton\"\nimport BoldIcon from \"./icons/BoldIcon\"\nimport H1Icon from \"./icons/H1Icon\"\nimport H2Icon from \"./icons/H2Icon\"\nimport ItalicIcon from \"./icons/ItalicIcon\"\nimport StrikethroughIcon from \"./icons/StrikethroughIcon\"\nimport SubscriptIcon from \"./icons/SubscriptIcon\"\nimport SuperscriptIcon from \"./icons/SuperscriptIcon\"\nimport UnderlinedIcon from \"./icons/UnderlinedIcon\"\n\n/**\n * Toolbar is the display for the editor toolbar.\n */\nconst Toolbar = () => {\n  return (\n    <div>\n      <MarkButton format=\"bold\" icon={<BoldIcon />} />\n      <MarkButton format=\"italic\" icon={<ItalicIcon />} />\n      <MarkButton format=\"underline\" icon={<UnderlinedIcon />} />\n      <MarkButton format=\"strikethrough\" icon={<StrikethroughIcon />} />\n      <MarkButton format=\"subscript\" icon={<SubscriptIcon />} />\n      <MarkButton format=\"superscript\" icon={<SuperscriptIcon />} />\n      <BlockButton format=\"h1\" icon={<H1Icon />} />\n      <BlockButton format=\"h2\" icon={<H2Icon />} />\n    </div>\n  )\n}\n\nexport default Toolbar\n","import React from \"react\"\nimport { RenderElementProps } from \"slate-react\"\nimport Typography from \"@material-ui/core/Typography\"\n\n/**\n * Element is used to render blocks based on a given type.\n */\nconst Element = ({ attributes, children, element }: RenderElementProps) => {\n  switch (element.type) {\n    case \"h1\":\n      return (\n        <Typography variant=\"h1\" {...attributes}>\n          {children}\n        </Typography>\n      )\n    case \"h2\":\n      return (\n        <Typography variant=\"h2\" {...attributes}>\n          {children}\n        </Typography>\n      )\n    default:\n      return (\n        <Typography component=\"p\" variant=\"body1\" {...attributes}>\n          {children}\n        </Typography>\n      )\n  }\n}\n\nexport default Element\n","import React from \"react\"\nimport { RenderLeafProps } from \"slate-react\"\n\n/**\n * Leaf is used to render text based on a given style.\n */\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  if (leaf.strikethrough) {\n    children = <s>{children}</s>\n  }\n\n  if (leaf.subscript) {\n    children = <sub>{children}</sub>\n  }\n\n  if (leaf.superscript) {\n    children = <sup>{children}</sup>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nexport default Leaf\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport { createEditor, Node } from \"slate\"\nimport { Slate, Editable, withReact } from \"slate-react\"\nimport Toolbar from \"./Toolbar\"\nimport Element from \"./Element\"\nimport Leaf from \"./Leaf\"\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [{ text: \"A line of text in a paragraph.\" }],\n  },\n]\n\n/**\n * PageEditor is the main editor component.\n */\nconst PageEditor = () => {\n  // create a slate editor object that won't change across renders\n  const editor = useMemo(() => withReact(createEditor()), [])\n  // store the value of the editor\n  const [value, setValue] = useState<Node[]>(initialValue)\n  // render expected element based on type passed as props\n  // memoize this function for subsequent renders\n  const renderElement = useCallback((props) => <Element {...props} />, [])\n  // render expected leaf based on type (i.e. bold, italic, etc)\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={(value) => setValue(value)}>\n      <Toolbar />\n      <Editable renderElement={renderElement} renderLeaf={renderLeaf} />\n    </Slate>\n  )\n}\n\nexport default PageEditor\n"],"names":["isMarkActive","editor","format","marks","Editor","toggleMark","isActive","removeMark","addMark","MarkButton","icon","useSlate","handleClick","event","preventDefault","React","IconButton","size","onClick","isBlockActive","nodeGenerator","nodes","match","n","isEditor","SlateElement","isElement","type","node","next","done","toggleBlock","Transforms","setNodes","BlockButton","BoldIcon","SvgIcon","d","fill","H1Icon","H2Icon","ItalicIcon","StrikethroughIcon","SubscriptIcon","SuperscriptIcon","UnderlinedIcon","Toolbar","Element","attributes","children","element","Typography","variant","component","Leaf","leaf","bold","italic","underline","strikethrough","subscript","superscript","initialValue","text","PageEditor","useMemo","withReact","createEditor","useState","value","setValue","renderElement","useCallback","props","renderLeaf","Slate","onChange","Editable"],"mappings":";;;;;;;AAMA;;;;;AAIA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAsBC,MAAtB;AACnB;AACA,MAAMC,KAAK,GAAGC,MAAM,CAACD,KAAP,CAAaF,MAAb,CAAd;;AAGA,MAAIE,KAAK,IAAIA,KAAK,CAACD,MAAD,CAAlB,EAA4B;AAC1B,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAVD;AAYA;;;;;AAGA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACJ,MAAD,EAAsBC,MAAtB;AACjB;AACA,MAAMI,QAAQ,GAAGN,YAAY,CAACC,MAAD,EAASC,MAAT,CAA7B;;AAGA,MAAII,QAAJ,EAAc;AACZF,IAAAA,MAAM,CAACG,UAAP,CAAkBN,MAAlB,EAA0BC,MAA1B;AACD,GAFD,MAEO;AACLE,IAAAA,MAAM,CAACI,OAAP,CAAeP,MAAf,EAAuBC,MAAvB,EAA+B,IAA/B;AACD;AACF,CAVD;AAmBA;;;;;AAGA,IAAMO,UAAU,GAAG,SAAbA,UAAa;MAAGP,cAAAA;MAAQQ,YAAAA;AAC5B,MAAMT,MAAM,GAAGU,QAAQ,EAAvB;;AAGA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAClBA,IAAAA,KAAK,CAACC,cAAN;AACAT,IAAAA,UAAU,CAACJ,MAAD,EAASC,MAAT,CAAV;AACD,GAHD;;AAKA,SACEa,mBAAA,CAACC,UAAD;AAAYC,IAAAA,IAAI,EAAC;AAAQC,IAAAA,OAAO,EAAEN;GAAlC,EACGF,IADH,CADF;AAKD,CAdD;;ACzCA;;;;;;;;;;;;;;AAcA;;;;AAGA,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAAClB,MAAD,EAAsBC,MAAtB;AACpB;AACA;AACA;AACA,MAAMkB,aAAa,GAAGhB,MAAM,CAACiB,KAAP,CAAapB,MAAb,EAAqB;AACzCqB,IAAAA,KAAK,EAAE,eAACC,CAAD;AAAA,aACL,CAACnB,MAAM,CAACoB,QAAP,CAAgBD,CAAhB,CAAD,IAAuBE,SAAY,CAACC,SAAb,CAAuBH,CAAvB,CAAvB,IAAoDA,CAAC,CAACI,IAAF,KAAWzB,MAD1D;AAAA;AADkC,GAArB,CAAtB;AAMA;;AACA,MAAM0B,IAAI,GAAGR,aAAa,CAACS,IAAd,EAAb;;AACA,SAAO,CAACD,IAAI,CAACE,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAhBD;AAkBA;;;;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAC9B,MAAD,EAAsBC,MAAtB;AAClB;AACA,MAAMI,QAAQ,GAAGa,aAAa,CAAClB,MAAD,EAASC,MAAT,CAA9B;AAGA;AACA;AACA;;AACA8B,EAAAA,UAAU,CAACC,QAAX,CAAoBhC,MAApB,EAA4B;AAC1B0B,IAAAA,IAAI,EAAErB,QAAQ,GAAG,WAAH,GAAiBJ;AADL,GAA5B;AAGD,CAXD;AAoBA;;;;;AAGA,IAAMgC,WAAW,GAAG,SAAdA,WAAc;MAAGhC,cAAAA;MAAQQ,YAAAA;AAC7B,MAAMT,MAAM,GAAGU,QAAQ,EAAvB;;AAGA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAClBA,IAAAA,KAAK,CAACC,cAAN;AACAiB,IAAAA,WAAW,CAAC9B,MAAD,EAASC,MAAT,CAAX;AACD,GAHD;;AAKA,SACEa,mBAAA,CAACC,UAAD;AAAYC,IAAAA,IAAI,EAAC;AAAQC,IAAAA,OAAO,EAAEN;GAAlC,EACGF,IADH,CADF;AAKD,CAdD;;AChEA,IAAMyB,QAAQ,GAAG,SAAXA,QAAW;AACf,SACEpB,mBAAA,CAACqB,OAAD,MAAA,EACErB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEEvB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAME,MAAM,GAAG,SAATA,MAAS;AACb,SACExB,mBAAA,CAACqB,OAAD,MAAA,EACErB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEEvB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMG,MAAM,GAAG,SAATA,MAAS;AACb,SACEzB,mBAAA,CAACqB,OAAD,MAAA,EACErB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEEvB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMI,UAAU,GAAG,SAAbA,UAAa;AACjB,SACE1B,mBAAA,CAACqB,OAAD,MAAA,EACErB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEEvB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB;AACxB,SACE3B,mBAAA,CAACqB,OAAD,MAAA,EACErB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEEvB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACAA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB;AACpB,SACE5B,mBAAA,CAACqB,OAAD,MAAA,EACErB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;GAAR,CADF,CADF;AAKD,CAND;;ACAA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB;AACtB,SACE7B,mBAAA,CAACqB,OAAD,MAAA,EACErB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;GAAR,CADF,CADF;AAKD,CAND;;ACAA,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB;AACrB,SACE9B,mBAAA,CAACqB,OAAD,MAAA,EACErB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;AAAgBC,IAAAA,IAAI,EAAC;GAA7B,CADF,EAEEvB,mBAAA,OAAA;AAAMsB,IAAAA,CAAC,EAAC;GAAR,CAFF,CADF;AAMD,CAPD;;ACSA;;;;AAGA,IAAMS,OAAO,GAAG,SAAVA,OAAU;AACd,SACE/B,mBAAA,MAAA,MAAA,EACEA,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAC;AAAOQ,IAAAA,IAAI,EAAEK,mBAAA,CAACoB,QAAD,MAAA;GAAhC,CADF,EAEEpB,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAC;AAASQ,IAAAA,IAAI,EAAEK,mBAAA,CAAC0B,UAAD,MAAA;GAAlC,CAFF,EAGE1B,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAC;AAAYQ,IAAAA,IAAI,EAAEK,mBAAA,CAAC8B,cAAD,MAAA;GAArC,CAHF,EAIE9B,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAC;AAAgBQ,IAAAA,IAAI,EAAEK,mBAAA,CAAC2B,iBAAD,MAAA;GAAzC,CAJF,EAKE3B,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAC;AAAYQ,IAAAA,IAAI,EAAEK,mBAAA,CAAC4B,aAAD,MAAA;GAArC,CALF,EAME5B,mBAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAC;AAAcQ,IAAAA,IAAI,EAAEK,mBAAA,CAAC6B,eAAD,MAAA;GAAvC,CANF,EAOE7B,mBAAA,CAACmB,WAAD;AAAahC,IAAAA,MAAM,EAAC;AAAKQ,IAAAA,IAAI,EAAEK,mBAAA,CAACwB,MAAD,MAAA;GAA/B,CAPF,EAQExB,mBAAA,CAACmB,WAAD;AAAahC,IAAAA,MAAM,EAAC;AAAKQ,IAAAA,IAAI,EAAEK,mBAAA,CAACyB,MAAD,MAAA;GAA/B,CARF,CADF;AAYD,CAbD;;ACXA;;;;AAGA,IAAMO,OAAO,GAAG,SAAVA,OAAU;MAAGC,kBAAAA;MAAYC,gBAAAA;MAAUC,eAAAA;;AACvC,UAAQA,OAAO,CAACvB,IAAhB;AACE,SAAK,IAAL;AACE,aACEZ,mBAAA,CAACoC,UAAD;AAAYC,QAAAA,OAAO,EAAC;SAASJ,WAA7B,EACGC,QADH,CADF;;AAKF,SAAK,IAAL;AACE,aACElC,mBAAA,CAACoC,UAAD;AAAYC,QAAAA,OAAO,EAAC;SAASJ,WAA7B,EACGC,QADH,CADF;;AAKF;AACE,aACElC,mBAAA,CAACoC,UAAD;AAAYE,QAAAA,SAAS,EAAC;AAAID,QAAAA,OAAO,EAAC;SAAYJ,WAA9C,EACGC,QADH,CADF;AAdJ;AAoBD,CArBD;;ACJA;;;;AAGA,IAAMK,IAAI,GAAG,SAAPA,IAAO;MAAGN,kBAAAA;MAAYC,gBAAAA;MAAUM,YAAAA;;AACpC,MAAIA,IAAI,CAACC,IAAT,EAAe;AACbP,IAAAA,QAAQ,GAAGlC,mBAAA,SAAA,MAAA,EAASkC,QAAT,CAAX;AACD;;AAED,MAAIM,IAAI,CAACE,MAAT,EAAiB;AACfR,IAAAA,QAAQ,GAAGlC,mBAAA,KAAA,MAAA,EAAKkC,QAAL,CAAX;AACD;;AAED,MAAIM,IAAI,CAACG,SAAT,EAAoB;AAClBT,IAAAA,QAAQ,GAAGlC,mBAAA,IAAA,MAAA,EAAIkC,QAAJ,CAAX;AACD;;AAED,MAAIM,IAAI,CAACI,aAAT,EAAwB;AACtBV,IAAAA,QAAQ,GAAGlC,mBAAA,IAAA,MAAA,EAAIkC,QAAJ,CAAX;AACD;;AAED,MAAIM,IAAI,CAACK,SAAT,EAAoB;AAClBX,IAAAA,QAAQ,GAAGlC,mBAAA,MAAA,MAAA,EAAMkC,QAAN,CAAX;AACD;;AAED,MAAIM,IAAI,CAACM,WAAT,EAAsB;AACpBZ,IAAAA,QAAQ,GAAGlC,mBAAA,MAAA,MAAA,EAAMkC,QAAN,CAAX;AACD;;AAED,SAAOlC,mBAAA,OAAA,oBAAUiC,WAAV,EAAuBC,QAAvB,CAAP;AACD,CA1BD;;ACCA,IAAMa,YAAY,GAAG,CACnB;AACEnC,EAAAA,IAAI,EAAE,WADR;AAEEsB,EAAAA,QAAQ,EAAE,CAAC;AAAEc,IAAAA,IAAI,EAAE;AAAR,GAAD;AAFZ,CADmB,CAArB;AAOA;;;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AACjB;AACA,MAAM/D,MAAM,GAAGgE,OAAO,CAAC;AAAA,WAAMC,SAAS,CAACC,YAAY,EAAb,CAAf;AAAA,GAAD,EAAkC,EAAlC,CAAtB;;kBAE0BC,QAAQ,CAASN,YAAT;MAA3BO;MAAOC;AAEd;;;AACA,MAAMC,aAAa,GAAGC,WAAW,CAAC,UAACC,KAAD;AAAA,WAAW1D,mBAAA,CAACgC,OAAD,oBAAa0B,MAAb,CAAX;AAAA,GAAD,EAAoC,EAApC,CAAjC;;AAEA,MAAMC,UAAU,GAAGF,WAAW,CAAC,UAACC,KAAD;AAAA,WAAW1D,mBAAA,CAACuC,IAAD,oBAAUmB,MAAV,CAAX;AAAA,GAAD,EAAiC,EAAjC,CAA9B;AAEA,SACE1D,mBAAA,CAAC4D,KAAD;AAAO1E,IAAAA,MAAM,EAAEA;AAAQoE,IAAAA,KAAK,EAAEA;AAAOO,IAAAA,QAAQ,EAAE,kBAACP,KAAD;AAAA,aAAWC,QAAQ,CAACD,KAAD,CAAnB;AAAA;GAA/C,EACEtD,mBAAA,CAAC+B,OAAD,MAAA,CADF,EAEE/B,mBAAA,CAAC8D,QAAD;AAAUN,IAAAA,aAAa,EAAEA;AAAeG,IAAAA,UAAU,EAAEA;GAApD,CAFF,CADF;AAMD,CAjBD;;;;"}
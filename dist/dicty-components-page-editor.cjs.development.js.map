{"version":3,"file":"dicty-components-page-editor.cjs.development.js","sources":["../src/components/buttons/MarkButton.tsx","../src/Toolbar.tsx","../src/components/Element.tsx","../src/components/Leaf.tsx","../src/PageEditor.tsx"],"sourcesContent":["import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { MarkFormat } from \"../../types\"\n\nconst isMarkActive = (editor: ReactEditor, format: MarkFormat) => {\n  // get a list of marks from the selected text\n  const marks = Editor.marks(editor)\n\n  // if there are marks for specified format then the mark is active\n  if (marks && marks[format]) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst toggleMark = (editor: ReactEditor, format: MarkFormat) => {\n  // first find if the selection's mark is currently active\n  const isActive = isMarkActive(editor, format)\n\n  // we either want to add or remove a mark based on whether it is currently active\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\ntype Props = {\n  /** Type of mark */\n  format: MarkFormat\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * MarkButton displays a button with associated click logic for toggling a mark.\n */\n\nconst MarkButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the mark within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleMark(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default MarkButton\n","import React from \"react\"\nimport MarkButton from \"./components/buttons/MarkButton\"\nimport FormatBoldIcon from \"@material-ui/icons/FormatBold\"\nimport FormatItalicIcon from \"@material-ui/icons/FormatItalic\"\nimport FormatUnderlinedIcon from \"@material-ui/icons/FormatUnderlined\"\n\n/**\n * Toolbar is the display for the editor toolbar.\n */\nconst Toolbar = () => {\n  return (\n    <div>\n      <MarkButton format=\"bold\" icon={<FormatBoldIcon />} />\n      <MarkButton format=\"italic\" icon={<FormatItalicIcon />} />\n      <MarkButton format=\"underline\" icon={<FormatUnderlinedIcon />} />\n    </div>\n  )\n}\n\nexport default Toolbar\n","import React from \"react\"\nimport { RenderElementProps } from \"slate-react\"\nimport Typography from \"@material-ui/core/Typography\"\n\n/**\n * Element is used to render blocks based on a given type.\n */\n\nconst Element = ({ attributes, children, element }: RenderElementProps) => {\n  switch (element.type) {\n    default:\n      return (\n        <Typography component=\"p\" variant=\"body1\" {...attributes}>\n          {children}\n        </Typography>\n      )\n  }\n}\n\nexport default Element\n","import React from \"react\"\nimport { RenderLeafProps } from \"slate-react\"\nimport Typography from \"@material-ui/core/Typography\"\n\n/**\n * Leaf is used to render text based on a given style.\n */\n\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  return (\n    <Typography component=\"span\" variant=\"body1\" {...attributes}>\n      {children}\n    </Typography>\n  )\n}\n\nexport default Leaf\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport { createEditor, Node } from \"slate\"\nimport { Slate, Editable, withReact } from \"slate-react\"\nimport Toolbar from \"./Toolbar\"\nimport Element from \"./components/Element\"\nimport Leaf from \"./components/Leaf\"\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [{ text: \"A line of text in a paragraph.\" }],\n  },\n]\n\n/**\n * PageEditor is the main editor component.\n */\nconst PageEditor = () => {\n  // create a slate editor object that won't change across renders\n  const editor = useMemo(() => withReact(createEditor()), [])\n  // store the value of the editor\n  const [value, setValue] = useState<Node[]>(initialValue)\n  // render expected element based on type passed as props\n  // memoize this function for subsequent renders\n  const renderElement = useCallback((props) => <Element {...props} />, [])\n  // render expected leaf based on type (i.e. bold, italic, etc)\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={(value) => setValue(value)}>\n      <Toolbar />\n      <Editable renderElement={renderElement} renderLeaf={renderLeaf} />\n    </Slate>\n  )\n}\n\nexport default PageEditor\n"],"names":["isMarkActive","editor","format","marks","Editor","toggleMark","isActive","removeMark","addMark","MarkButton","icon","useSlate","handleClick","event","preventDefault","React","IconButton","size","onClick","Toolbar","FormatBoldIcon","FormatItalicIcon","FormatUnderlinedIcon","Element","attributes","children","element","type","Typography","component","variant","Leaf","leaf","bold","italic","underline","initialValue","text","PageEditor","useMemo","withReact","createEditor","useState","value","setValue","renderElement","useCallback","props","renderLeaf","Slate","onChange","Editable"],"mappings":";;;;;;;;;;;;;;;;AAMA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAsBC,MAAtB;AACnB;AACA,MAAMC,KAAK,GAAGC,YAAM,CAACD,KAAP,CAAaF,MAAb,CAAd;;AAGA,MAAIE,KAAK,IAAIA,KAAK,CAACD,MAAD,CAAlB,EAA4B;AAC1B,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAVD;;AAYA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACJ,MAAD,EAAsBC,MAAtB;AACjB;AACA,MAAMI,QAAQ,GAAGN,YAAY,CAACC,MAAD,EAASC,MAAT,CAA7B;;AAGA,MAAII,QAAJ,EAAc;AACZF,IAAAA,YAAM,CAACG,UAAP,CAAkBN,MAAlB,EAA0BC,MAA1B;AACD,GAFD,MAEO;AACLE,IAAAA,YAAM,CAACI,OAAP,CAAeP,MAAf,EAAuBC,MAAvB,EAA+B,IAA/B;AACD;AACF,CAVD;AAmBA;;;;;AAIA,IAAMO,UAAU,GAAG,SAAbA,UAAa;MAAGP,cAAAA;MAAQQ,YAAAA;AAC5B,MAAMT,MAAM,GAAGU,mBAAQ,EAAvB;;AAGA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAClBA,IAAAA,KAAK,CAACC,cAAN;AACAT,IAAAA,UAAU,CAACJ,MAAD,EAASC,MAAT,CAAV;AACD,GAHD;;AAKA,SACEa,4BAAA,CAACC,UAAD;AAAYC,IAAAA,IAAI,EAAC;AAAQC,IAAAA,OAAO,EAAEN;GAAlC,EACGF,IADH,CADF;AAKD,CAdD;;ACnCA;;;;AAGA,IAAMS,OAAO,GAAG,SAAVA,OAAU;AACd,SACEJ,4BAAA,MAAA,MAAA,EACEA,4BAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAC;AAAOQ,IAAAA,IAAI,EAAEK,4BAAA,CAACK,cAAD,MAAA;GAAhC,CADF,EAEEL,4BAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAC;AAASQ,IAAAA,IAAI,EAAEK,4BAAA,CAACM,gBAAD,MAAA;GAAlC,CAFF,EAGEN,4BAAA,CAACN,UAAD;AAAYP,IAAAA,MAAM,EAAC;AAAYQ,IAAAA,IAAI,EAAEK,4BAAA,CAACO,oBAAD,MAAA;GAArC,CAHF,CADF;AAOD,CARD;;ACLA;;;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU;MAAGC,kBAAAA;MAAYC,gBAAAA;MAAUC,eAAAA;;AACvC,UAAQA,OAAO,CAACC,IAAhB;AACE;AACE,aACEZ,4BAAA,CAACa,UAAD;AAAYC,QAAAA,SAAS,EAAC;AAAIC,QAAAA,OAAO,EAAC;SAAYN,WAA9C,EACGC,QADH,CADF;AAFJ;AAQD,CATD;;ACJA;;;;AAIA,IAAMM,IAAI,GAAG,SAAPA,IAAO;MAAGP,kBAAAA;MAAYC,gBAAAA;MAAUO,YAAAA;;AACpC,MAAIA,IAAI,CAACC,IAAT,EAAe;AACbR,IAAAA,QAAQ,GAAGV,4BAAA,SAAA,MAAA,EAASU,QAAT,CAAX;AACD;;AAED,MAAIO,IAAI,CAACE,MAAT,EAAiB;AACfT,IAAAA,QAAQ,GAAGV,4BAAA,KAAA,MAAA,EAAKU,QAAL,CAAX;AACD;;AAED,MAAIO,IAAI,CAACG,SAAT,EAAoB;AAClBV,IAAAA,QAAQ,GAAGV,4BAAA,IAAA,MAAA,EAAIU,QAAJ,CAAX;AACD;;AAED,SACEV,4BAAA,CAACa,UAAD;AAAYC,IAAAA,SAAS,EAAC;AAAOC,IAAAA,OAAO,EAAC;KAAYN,WAAjD,EACGC,QADH,CADF;AAKD,CAlBD;;ACDA,IAAMW,YAAY,GAAG,CACnB;AACET,EAAAA,IAAI,EAAE,WADR;AAEEF,EAAAA,QAAQ,EAAE,CAAC;AAAEY,IAAAA,IAAI,EAAE;AAAR,GAAD;AAFZ,CADmB,CAArB;AAOA;;;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AACjB;AACA,MAAMrC,MAAM,GAAGsC,aAAO,CAAC;AAAA,WAAMC,oBAAS,CAACC,kBAAY,EAAb,CAAf;AAAA,GAAD,EAAkC,EAAlC,CAAtB;;kBAE0BC,cAAQ,CAASN,YAAT;MAA3BO;MAAOC;AAEd;;;AACA,MAAMC,aAAa,GAAGC,iBAAW,CAAC,UAACC,KAAD;AAAA,WAAWhC,4BAAA,CAACQ,OAAD,oBAAawB,MAAb,CAAX;AAAA,GAAD,EAAoC,EAApC,CAAjC;;AAEA,MAAMC,UAAU,GAAGF,iBAAW,CAAC,UAACC,KAAD;AAAA,WAAWhC,4BAAA,CAACgB,IAAD,oBAAUgB,MAAV,CAAX;AAAA,GAAD,EAAiC,EAAjC,CAA9B;AAEA,SACEhC,4BAAA,CAACkC,gBAAD;AAAOhD,IAAAA,MAAM,EAAEA;AAAQ0C,IAAAA,KAAK,EAAEA;AAAOO,IAAAA,QAAQ,EAAE,kBAACP,KAAD;AAAA,aAAWC,QAAQ,CAACD,KAAD,CAAnB;AAAA;GAA/C,EACE5B,4BAAA,CAACI,OAAD,MAAA,CADF,EAEEJ,4BAAA,CAACoC,mBAAD;AAAUN,IAAAA,aAAa,EAAEA;AAAeG,IAAAA,UAAU,EAAEA;GAApD,CAFF,CADF;AAMD,CAjBD;;;;"}
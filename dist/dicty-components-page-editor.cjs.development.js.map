{"version":3,"file":"dicty-components-page-editor.cjs.development.js","sources":["../src/components/buttons/BoldButton.tsx","../src/Toolbar.tsx","../src/components/Element.tsx","../src/components/Leaf.tsx","../src/PageEditor.tsx"],"sourcesContent":["import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport FormatBoldIcon from \"@material-ui/icons/FormatBold\"\n\n// make this a MarkButton component with more generic functions\n\nconst isBoldMarkActive = (editor: ReactEditor) => {\n  // gets a list of marks on the text on the given selection\n  const marks = Editor.marks(editor)\n\n  // if there are bold marks then the bold mark is active\n  return marks ? marks[\"bold\"] === true : false\n}\n\nconst toggleBoldMark = (editor: ReactEditor) => {\n  // first find if the selection's mark is currently active\n  const isActive = isBoldMarkActive(editor)\n\n  if (isActive) {\n    Editor.removeMark(editor, \"bold\")\n  } else {\n    Editor.addMark(editor, \"bold\", true)\n  }\n  console.log(Editor.marks(editor))\n}\n\nconst BoldButton = () => {\n  const editor = useSlate()\n\n  // when bold button is clicked, toggle the mark\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleBoldMark(editor)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      <FormatBoldIcon />\n    </IconButton>\n  )\n}\n\nexport default BoldButton\n","import React from \"react\"\nimport BoldButton from \"./components/buttons/BoldButton\"\n\nconst Toolbar = () => {\n  return (\n    <div>\n      <BoldButton />\n    </div>\n  )\n}\n\nexport default Toolbar\n","import React from \"react\"\nimport { RenderElementProps } from \"slate-react\"\n// import Typography from \"@material-ui/core/Typography\"\n\nconst Element = ({ attributes, children, element }: RenderElementProps) => {\n  switch (element.type) {\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nexport default Element\n","import React from \"react\"\nimport { RenderLeafProps } from \"slate-react\"\n// import Typography from \"@material-ui/core/Typography\"\n\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nexport default Leaf\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport { createEditor, Node } from \"slate\"\nimport { Slate, Editable, withReact } from \"slate-react\"\nimport Toolbar from \"./Toolbar\"\nimport Element from \"./components/Element\"\nimport Leaf from \"./components/Leaf\"\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [{ text: \"A line of text in a paragraph.\" }],\n  },\n]\n\nconst PageEditor = () => {\n  // create a slate editor object that won't change across renders\n  const editor = useMemo(() => withReact(createEditor()), [])\n  // store the value of the editor\n  const [value, setValue] = useState<Node[]>(initialValue)\n  // render expected element based on type passed as props\n  // memoize this function for subsequent renders\n  const renderElement = useCallback((props) => <Element {...props} />, [])\n  // render expected leaf based on type (i.e. bold, italic, etc)\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={(value) => setValue(value)}>\n      <Toolbar />\n      <Editable renderElement={renderElement} renderLeaf={renderLeaf} />\n    </Slate>\n  )\n}\n\nexport default PageEditor\n"],"names":["isBoldMarkActive","editor","marks","Editor","toggleBoldMark","isActive","removeMark","addMark","console","log","BoldButton","useSlate","handleClick","event","preventDefault","React","IconButton","size","onClick","FormatBoldIcon","Toolbar","Element","attributes","children","element","type","Leaf","leaf","bold","italic","underline","initialValue","text","PageEditor","useMemo","withReact","createEditor","useState","value","setValue","renderElement","useCallback","props","renderLeaf","Slate","onChange","Editable"],"mappings":"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"}
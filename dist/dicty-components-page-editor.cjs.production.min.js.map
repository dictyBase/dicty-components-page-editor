{"version":3,"file":"dicty-components-page-editor.cjs.production.min.js","sources":["../src/components/buttons/MarkButton.tsx","../src/Toolbar.tsx","../src/components/Element.tsx","../src/components/Leaf.tsx","../src/PageEditor.tsx"],"sourcesContent":["import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { MarkFormat } from \"../../types\"\n\nconst isMarkActive = (editor: ReactEditor, format: MarkFormat) => {\n  // get a list of marks from the selected text\n  const marks = Editor.marks(editor)\n\n  // if there are marks for specified format then the mark is active\n  if (marks && marks[format]) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst toggleMark = (editor: ReactEditor, format: MarkFormat) => {\n  // first find if the selection's mark is currently active\n  const isActive = isMarkActive(editor, format)\n\n  // we either want to add or remove a mark based on whether it is currently active\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\ntype Props = {\n  /** Type of mark */\n  format: MarkFormat\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * MarkButton displays a button with associated click logic for toggling a mark.\n */\n\nconst MarkButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the mark within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleMark(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default MarkButton\n","import React from \"react\"\nimport MarkButton from \"./components/buttons/MarkButton\"\nimport FormatBoldIcon from \"@material-ui/icons/FormatBold\"\nimport FormatItalicIcon from \"@material-ui/icons/FormatItalic\"\nimport FormatUnderlinedIcon from \"@material-ui/icons/FormatUnderlined\"\nimport FormatStrikethroughIcon from \"@material-ui/icons/FormatStrikethrough\"\n\n/**\n * Toolbar is the display for the editor toolbar.\n */\nconst Toolbar = () => {\n  return (\n    <div>\n      <MarkButton format=\"bold\" icon={<FormatBoldIcon />} />\n      <MarkButton format=\"italic\" icon={<FormatItalicIcon />} />\n      <MarkButton format=\"underline\" icon={<FormatUnderlinedIcon />} />\n      <MarkButton format=\"strikethrough\" icon={<FormatStrikethroughIcon />} />\n    </div>\n  )\n}\n\nexport default Toolbar\n","import React from \"react\"\nimport { RenderElementProps } from \"slate-react\"\nimport Typography from \"@material-ui/core/Typography\"\n\n/**\n * Element is used to render blocks based on a given type.\n */\n\nconst Element = ({ attributes, children, element }: RenderElementProps) => {\n  switch (element.type) {\n    default:\n      return (\n        <Typography component=\"p\" variant=\"body1\" {...attributes}>\n          {children}\n        </Typography>\n      )\n  }\n}\n\nexport default Element\n","import React from \"react\"\nimport { RenderLeafProps } from \"slate-react\"\nimport Typography from \"@material-ui/core/Typography\"\n\n/**\n * Leaf is used to render text based on a given style.\n */\n\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  if (leaf.strikethrough) {\n    children = <s>{children}</s>\n  }\n\n  return (\n    <Typography component=\"span\" variant=\"body1\" {...attributes}>\n      {children}\n    </Typography>\n  )\n}\n\nexport default Leaf\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport { createEditor, Node } from \"slate\"\nimport { Slate, Editable, withReact } from \"slate-react\"\nimport Toolbar from \"./Toolbar\"\nimport Element from \"./components/Element\"\nimport Leaf from \"./components/Leaf\"\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [{ text: \"A line of text in a paragraph.\" }],\n  },\n]\n\n/**\n * PageEditor is the main editor component.\n */\nconst PageEditor = () => {\n  // create a slate editor object that won't change across renders\n  const editor = useMemo(() => withReact(createEditor()), [])\n  // store the value of the editor\n  const [value, setValue] = useState<Node[]>(initialValue)\n  // render expected element based on type passed as props\n  // memoize this function for subsequent renders\n  const renderElement = useCallback((props) => <Element {...props} />, [])\n  // render expected leaf based on type (i.e. bold, italic, etc)\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={(value) => setValue(value)}>\n      <Toolbar />\n      <Editable renderElement={renderElement} renderLeaf={renderLeaf} />\n    </Slate>\n  )\n}\n\nexport default PageEditor\n"],"names":["MarkButton","format","icon","editor","useSlate","React","IconButton","size","onClick","event","preventDefault","marks","Editor","isMarkActive","addMark","removeMark","toggleMark","Toolbar","FormatBoldIcon","FormatItalicIcon","FormatUnderlinedIcon","FormatStrikethroughIcon","Element","children","Typography","component","variant","attributes","Leaf","leaf","bold","italic","underline","strikethrough","initialValue","type","text","useMemo","withReact","createEditor","useState","value","setValue","renderElement","useCallback","props","renderLeaf","Slate","onChange","Editable"],"mappings":"ufAyCMA,EAAa,gBAAGC,IAAAA,OAAQC,IAAAA,KACtBC,EAASC,oBASbC,gBAACC,GAAWC,KAAK,QAAQC,QANP,SAACC,GACnBA,EAAMC,iBA5BS,SAACP,EAAqBF,IAZpB,SAACE,EAAqBF,OAEnCU,EAAQC,SAAOD,MAAMR,YAGvBQ,IAASA,EAAMV,IASFY,CAAaV,EAAQF,GAMpCW,SAAOE,QAAQX,EAAQF,GAAQ,GAF/BW,SAAOG,WAAWZ,EAAQF,GAuB1Be,CAAWb,EAAQF,KAKhBC,IC1CDe,EAAU,kBAEZZ,2BACEA,gBAACL,GAAWC,OAAO,OAAOC,KAAMG,gBAACa,UACjCb,gBAACL,GAAWC,OAAO,SAASC,KAAMG,gBAACc,UACnCd,gBAACL,GAAWC,OAAO,YAAYC,KAAMG,gBAACe,UACtCf,gBAACL,GAAWC,OAAO,gBAAgBC,KAAMG,gBAACgB,YCR1CC,EAAU,gBAAeC,IAAAA,gBAIvBlB,gBAACmB,iBAAWC,UAAU,IAAIC,QAAQ,WAJvBC,YAKRJ,ICLLK,EAAO,gBAAGD,IAAAA,WAAYJ,IAAAA,SAAUM,IAAAA,YAChCA,EAAKC,OACPP,EAAWlB,8BAASkB,IAGlBM,EAAKE,SACPR,EAAWlB,0BAAKkB,IAGdM,EAAKG,YACPT,EAAWlB,yBAAIkB,IAGbM,EAAKI,gBACPV,EAAWlB,yBAAIkB,IAIflB,gBAACmB,iBAAWC,UAAU,OAAOC,QAAQ,SAAYC,GAC9CJ,ICpBDW,EAAe,CACnB,CACEC,KAAM,YACNZ,SAAU,CAAC,CAAEa,KAAM,wDAOJ,eAEXjC,EAASkC,WAAQ,kBAAMC,YAAUC,oBAAiB,MAE9BC,WAAiBN,GAApCO,OAAOC,OAGRC,EAAgBC,eAAY,SAACC,UAAUxC,gBAACiB,mBAAYuB,MAAW,IAE/DC,EAAaF,eAAY,SAACC,UAAUxC,gBAACuB,mBAASiB,MAAW,WAG7DxC,gBAAC0C,SAAM5C,OAAQA,EAAQsC,MAAOA,EAAOO,SAAU,SAACP,UAAUC,EAASD,KACjEpC,gBAACY,QACDZ,gBAAC4C,YAASN,cAAeA,EAAeG,WAAYA"}
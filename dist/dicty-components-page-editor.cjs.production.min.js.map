{"version":3,"file":"dicty-components-page-editor.cjs.production.min.js","sources":["../src/styles/buttons.ts","../src/components/buttons/MarkButton.tsx","../src/utils/blocks.ts","../src/constants/types.ts","../src/components/buttons/BlockButton.tsx","../src/components/buttons/AlignButton.tsx","../src/styles/dialog.ts","../src/components/dialogs/LinkDialog.tsx","../src/utils/links.ts","../src/components/buttons/LinkButton.tsx","../src/hooks/useLinks.ts","../src/hooks/useAnchorElement.ts","../src/components/buttons/AutolinkIDsButton.tsx","../src/components/dropdowns/ColorPicker.tsx","../src/utils/getCurrentMark.ts","../src/components/buttons/FontColorButton.tsx","../src/components/icons/CheckIcon.tsx","../src/utils/dropdownValues.ts","../src/utils/getParentNode.ts","../src/components/buttons/LineSpacingButton.tsx","../src/components/dialogs/ImageDialog.tsx","../src/components/buttons/ImageButton.tsx","../src/components/dialogs/VideoDialog.tsx","../src/utils/getVideoID.ts","../src/components/buttons/VideoButton.tsx","../src/components/icons/ScientificSymbolIcon.tsx","../src/components/buttons/ScientificSymbolsButton.tsx","../src/components/icons/BoldIcon.tsx","../src/components/icons/ItalicIcon.tsx","../src/components/icons/StrikethroughIcon.tsx","../src/components/icons/SubscriptIcon.tsx","../src/components/icons/SuperscriptIcon.tsx","../src/components/icons/UnderlinedIcon.tsx","../src/components/icons/H1Icon.tsx","../src/components/icons/H2Icon.tsx","../src/components/icons/H3Icon.tsx","../src/components/icons/LinkIcon.tsx","../src/components/icons/DividerIcon.tsx","../src/components/icons/LineSpacingIcon.tsx","../src/components/icons/ImageIcon.tsx","../src/components/icons/VideoIcon.tsx","../src/components/icons/UnorderedListIcon.tsx","../src/components/icons/OrderedListIcon.tsx","../src/components/icons/IndentIncreaseIcon.tsx","../src/components/icons/IndentDecreaseIcon.tsx","../src/components/icons/AlignLeftIcon.tsx","../src/components/icons/AlignCenterIcon.tsx","../src/components/icons/AlignRightIcon.tsx","../src/components/icons/AlignJustifyIcon.tsx","../src/components/dropdowns/Dropdown.tsx","../src/components/icons/FontColorIcon.tsx","../src/utils/lists.ts","../src/plugins/withLists.ts","../src/components/icons/TableIcon.tsx","../src/components/icons/TableInsertColumnIcon.tsx","../src/components/icons/TableInsertRowIcon.tsx","../src/components/icons/TableDeleteColumnIcon.tsx","../src/components/icons/TableDeleteRowIcon.tsx","../src/components/icons/DeleteIcon.tsx","../src/utils/tables.ts","../src/components/buttons/TableButtons.tsx","../src/components/Separator.tsx","../src/components/Toolbar.tsx","../src/components/InlineToolbar.tsx","../src/styles/media.ts","../src/components/Image.tsx","../src/components/Video.tsx","../src/components/Element.tsx","../src/utils/getFontSize.ts","../src/components/Leaf.tsx","../src/utils/deserialize.ts","../src/utils/migration.js","../src/styles/theme.ts","../src/components/PageEditor.tsx","../src/plugins/withHTML.ts","../src/plugins/withNormalize.ts","../src/plugins/withMedia.ts","../src/plugins/withLinks.ts","../src/utils/onKeyDown.ts"],"sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\"\n\ntype StyleProps = {\n  active: boolean | unknown\n}\n\nconst useStyles = makeStyles(() => ({\n  button: (props?: StyleProps) => ({\n    color: props?.active ? \"#000\" : \"rgba(0, 0, 0, 0.54)\",\n  }),\n}))\n\nexport default useStyles\n","import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport { CustomEditor } from \"../../types/editor\"\nimport useStyles from \"../../styles/buttons\"\n\n/**\n * isMarkActive determines if the current text selection contains an\n * active mark\n */\nconst isMarkActive = (editor: CustomEditor, format: string) => {\n  // get a list of marks from the selected text\n  const marks = Editor.marks(editor)\n\n  // if there are marks for specified format then the mark is active\n  if (marks && marks[format]) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/**\n * toggleMark will either remove or add a mark to the given text selection\n */\nconst toggleMark = (editor: CustomEditor, format: string) => {\n  // first find if the selection's mark is currently active\n  const isActive = isMarkActive(editor, format)\n\n  // we either want to add or remove a mark based on whether it is currently active\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\ntype Props = {\n  /** Type of mark (i.e. \"bold\") */\n  format: string\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * MarkButton displays a button with associated click logic for toggling a mark.\n */\nconst MarkButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n  const props = {\n    active: isMarkActive(editor, format),\n  }\n  const classes = useStyles(props)\n\n  // when button is clicked, toggle the mark within the editor\n  const handleMouseDown = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleMark(editor, format)\n  }\n\n  return (\n    <Tooltip title={format}>\n      <IconButton\n        className={classes.button}\n        size=\"small\"\n        aria-label={`${format}`}\n        onMouseDown={handleMouseDown}>\n        {icon}\n      </IconButton>\n    </Tooltip>\n  )\n}\n\nexport default MarkButton\n","import { Editor, Transforms, Element as SlateElement } from \"slate\"\nimport { types } from \"../constants/types\"\n\n/**\n * isBlockActive determines if the current text selection contains an active block\n */\nconst isBlockActive = (editor: Editor, property: string, value: string) => {\n  // convert nodes iterator to array and get first result\n  const [match] = Array.from(\n    Editor.nodes(editor, {\n      match: (n) =>\n        !Editor.isEditor(n) &&\n        SlateElement.isElement(n) &&\n        n[property] === value,\n    }),\n  )\n  // return boolean to indicate if match was found\n  return !!match\n}\n\n/**\n * toggleBlock will set the appropriate nodes for the given selection\n */\nconst toggleBlock = (editor: Editor, format: string) => {\n  // first find if the selected block is currently active\n  const isActive = isBlockActive(editor, \"type\", format)\n\n  // setNodes is used to set properties at the currently selected element.\n  // If the block is active, then we want to toggle it back to the default\n  // paragraph type. If the block is not active, we toggle the type to match it.\n  Transforms.setNodes(editor, {\n    type: isActive ? types.paragraph : format,\n  })\n}\n\nexport { isBlockActive, toggleBlock }\n","const types = {\n  // marks\n  bold: \"bold\",\n  italic: \"italic\",\n  underline: \"underline\",\n  strikethrough: \"strikethrough\",\n  subscript: \"subscript\",\n  superscript: \"superscript\",\n  // inline\n  link: \"link\",\n  // blocks\n  paragraph: \"paragraph\",\n  h1: \"h1\",\n  h2: \"h2\",\n  h3: \"h3\",\n  divider: \"divider\",\n  lineSpacing: \"lineSpacing\",\n  image: \"image\",\n  video: \"video\",\n  orderedList: \"orderedList\",\n  unorderedList: \"unorderedList\",\n  listItem: \"listItem\",\n  indentDecrease: \"indentDecrease\",\n  indentIncrease: \"indentIncrease\",\n  tableWrap: \"tableWrap\",\n  table: \"table\",\n  tableRow: \"tableRow\",\n  tableColumn: \"tableColumn\",\n  tableCell: \"tableCell\",\n  tableDelete: \"tableDelete\",\n  tableRowDelete: \"tableRowDelete\",\n  tableColumnDelete: \"tableColumnDelete\",\n}\n\nconst alignments = {\n  left: \"left\",\n  center: \"center\",\n  right: \"right\",\n  justify: \"justify\",\n}\n\nconst attributes = {\n  borderColor: \"borderColor\",\n  fontColor: \"fontColor\",\n}\n\nexport { types, alignments, attributes }\n","import React, { MouseEvent } from \"react\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport { isBlockActive } from \"../../utils/blocks\"\nimport useStyles from \"../../styles/buttons\"\n\n/**\n * PROCESS:\n *\n * 1. User clicks button\n * 2. Use generator function to find any matching nodes for that block type.\n * 3. If there are no matches then we do not mark that block as active.\n * 4. If the block is not active, then we set the nodes to match that format type.\n * 5. If there is a match, we mark that block as active for the first matching node.\n * 6. If the block is active, then we set the nodes back to the default type of\n *    'paragraph'.\n */\n\ntype Props = {\n  /** Type of block (i.e. \"h1\") */\n  format: string\n  /** Icon to display in button */\n  icon: JSX.Element\n  /** Function to call when button is clicked */\n  clickFn: () => void\n}\n\n/**\n * BlockButton displays a button with associated click logic for toggling a\n * block.\n */\nconst BlockButton = ({ format, icon, clickFn }: Props) => {\n  const editor = useSlate()\n  const props = {\n    active: isBlockActive(editor, \"type\", format),\n  }\n  const classes = useStyles(props)\n\n  // when button is clicked, toggle the block within the editor\n  const handleMouseDown = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    clickFn()\n  }\n\n  return (\n    <Tooltip title={format}>\n      <IconButton\n        className={classes.button}\n        size=\"small\"\n        aria-label={format}\n        // use onMouseDown to avoid editor selection becoming null\n        // and losing cursor position\n        onMouseDown={handleMouseDown}>\n        {icon}\n      </IconButton>\n    </Tooltip>\n  )\n}\n\nexport default BlockButton\n","import React, { MouseEvent } from \"react\"\nimport { Editor, Transforms } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport useStyles from \"../../styles/buttons\"\nimport { isBlockActive } from \"../../utils/blocks\"\n\nconst toggleAlign = (editor: Editor, align: string) => {\n  const isActive = isBlockActive(editor, \"align\", align)\n\n  Transforms.setNodes(editor, {\n    align: isActive ? \"left\" : align,\n  })\n}\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n  /** Text alignment property */\n  align: string\n}\n\n/**\n * AlignButton displays a button with associated logic for adding the \"align\"\n * attribute.\n */\nconst AlignButton = ({ icon, align }: Props) => {\n  const editor = useSlate()\n  const props = {\n    active: isBlockActive(editor, \"align\", align),\n  }\n  const classes = useStyles(props)\n\n  const handleMouseDown = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleAlign(editor, align)\n  }\n\n  return (\n    <Tooltip title={align}>\n      <IconButton\n        className={classes.button}\n        size=\"small\"\n        aria-label={`align-${align}`}\n        onMouseDown={handleMouseDown}>\n        {icon}\n      </IconButton>\n    </Tooltip>\n  )\n}\n\nexport default AlignButton\n","import { makeStyles } from \"@material-ui/core/styles\"\n\nconst useStyles = makeStyles(() => ({\n  button: {\n    textTransform: \"none\",\n  },\n}))\n\nexport default useStyles\n","import React from \"react\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport useStyles from \"../../styles/dialog\"\nimport { LinkDialogProps } from \"../../types/dialog\"\n\nconst LinkDialog = ({\n  handleAddClick,\n  handleClose,\n  dialogOpen,\n  link,\n  setLink,\n}: LinkDialogProps) => {\n  const classes = useStyles()\n\n  return (\n    <Dialog\n      open={dialogOpen}\n      onClose={handleClose}\n      aria-labelledby=\"link-dialog-title\">\n      <DialogTitle id=\"link-dialog-title\">Link Details</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"url\"\n          label=\"URL\"\n          type=\"url\"\n          defaultValue={link.url}\n          onChange={(e) =>\n            setLink({\n              url: e.target.value,\n              text: link.text,\n            })\n          }\n          fullWidth\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"text\"\n          label=\"Text\"\n          type=\"text\"\n          defaultValue={link.text ? link.text : \"\"}\n          onChange={(e) =>\n            setLink({\n              text: e.target.value,\n              url: link.url,\n            })\n          }\n          fullWidth\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          className={classes.button}\n          onClick={handleAddClick}\n          variant=\"contained\"\n          color=\"primary\">\n          Add Link\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default LinkDialog\n","import { Editor, Element as SlateElement, Transforms, Range, Node } from \"slate\"\nimport { Link } from \"../types/link\"\nimport { types } from \"../constants/types\"\n\n// look for a match of the link type\nconst linkNodeOptions = {\n  match: (n: Node) =>\n    !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === types.link,\n}\n\nconst isLinkActive = (editor: Editor) => {\n  const [match] = Array.from(Editor.nodes(editor, linkNodeOptions))\n  return !!match\n}\n\n/**\n * upsertLink updates or adds a new link. If there is no selection,\n * it adds a new link with the provided text. Otherwise it will wrap the\n * selection with a link node using the user's link and text.\n */\nconst upsertLink = (editor: Editor, link: Link) => {\n  const { url, text } = link\n  // check if there is an existing link first then unwrap it\n  if (isLinkActive(editor)) {\n    Transforms.unwrapNodes(editor, linkNodeOptions)\n  }\n\n  const linkData = {\n    type: types.link,\n    url,\n    children: [{ text: text }],\n  }\n\n  const { selection } = editor\n  const isCollapsed = selection && Range.isCollapsed(selection)\n\n  if (isCollapsed) {\n    Transforms.insertNodes(editor, linkData)\n  } else {\n    Transforms.wrapNodes(editor, linkData, { split: true })\n    Editor.insertText(editor, text)\n    Transforms.collapse(editor, { edge: \"end\" })\n  }\n}\n\n// getLinkSelection gets the current text and URL for the user's current selection.\nconst getLinkSelection = (editor: Editor) => {\n  const { selection } = editor\n  let prevURL,\n    selectedText = \"\"\n  // if there is a current selection then pull the text and URL from it\n  // and update state accordingly\n  if (selection && !Range.isCollapsed(selection)) {\n    selectedText = Editor.string(editor, selection)\n    const [linkNode] = Array.from(Editor.nodes(editor, linkNodeOptions))\n    if (linkNode && SlateElement.isElement(linkNode[0])) {\n      prevURL = linkNode[0].url as string\n    }\n  }\n  return {\n    url: prevURL || \"\",\n    text: selectedText,\n  }\n}\n\nexport { linkNodeOptions, isLinkActive, upsertLink, getLinkSelection }\n","import React from \"react\"\nimport { Transforms } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport LinkDialog from \"../dialogs/LinkDialog\"\nimport useLinks from \"../../hooks/useLinks\"\nimport { isLinkActive, getLinkSelection } from \"../../utils/links\"\nimport useStyles from \"../../styles/buttons\"\n\n// this is necessary to maintain editor selection when link dialog appears;\n// the deselect method unsets the editor selection\nTransforms.deselect = () => {}\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * LinkButton is a button specifically for adding links.\n */\nconst LinkButton = ({ icon }: Props) => {\n  const editor = useSlate()\n  const { link, setLink, linkDialogOpen, setLinkDialogOpen, handleAddLink } =\n    useLinks()\n  const props = {\n    active: isLinkActive(editor),\n  }\n  const classes = useStyles(props)\n\n  const handleMouseDown = () => {\n    const link = getLinkSelection(editor)\n    setLink(link)\n    setLinkDialogOpen(true)\n  }\n\n  // if the user has clicked away without adding the link then we don't need to do anything with their data\n  const handleClose = () => setLinkDialogOpen(false)\n\n  return (\n    <React.Fragment>\n      <Tooltip title=\"link\">\n        <IconButton\n          className={classes.button}\n          size=\"small\"\n          aria-label=\"link\"\n          onMouseDown={handleMouseDown}>\n          {icon}\n        </IconButton>\n      </Tooltip>\n      <LinkDialog\n        handleAddClick={handleAddLink}\n        handleClose={handleClose}\n        dialogOpen={linkDialogOpen}\n        link={link}\n        setLink={setLink}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default LinkButton\n","import React from \"react\"\nimport { useSlate } from \"slate-react\"\nimport { upsertLink } from \"../utils/links\"\n\n// useLinks is a hook for internal link state logic.\nconst useLinks = () => {\n  const editor = useSlate()\n  const [linkDialogOpen, setLinkDialogOpen] = React.useState(false)\n  const [link, setLink] = React.useState({\n    url: \"\",\n    text: \"\",\n  })\n\n  const handleAddLink = () => {\n    upsertLink(editor, link)\n    setLinkDialogOpen(false)\n  }\n\n  return {\n    link,\n    setLink,\n    linkDialogOpen,\n    setLinkDialogOpen,\n    handleAddLink,\n  }\n}\n\nexport default useLinks\n","import React from \"react\"\n\n// useAnchorElement contains state logic and associated functions for components\n// requiring an anchor element (i.e. dropdown menus, popovers)\nconst useAnchorElement = () => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n\n  const handleMouseDown = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = (_: {}, reason: \"backdropClick\" | \"escapeKeyDown\") => {\n    if (reason === \"backdropClick\" || reason === \"escapeKeyDown\") {\n      setAnchorEl(null)\n    }\n  }\n\n  return {\n    anchorEl,\n    setAnchorEl,\n    handleMouseDown,\n    handleClose,\n  }\n}\n\nexport default useAnchorElement\n","import React from \"react\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport Menu from \"@material-ui/core/Menu\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport useAnchorElement from \"../../hooks/useAnchorElement\"\nimport { getLinkSelection, upsertLink } from \"../../utils/links\"\n\nconst ids = {\n  pubmed: \"PubMed\",\n  go: \"GO\",\n  gene: \"Gene\",\n  strain: \"Strain\",\n  plasmid: \"Plasmid\",\n}\n\nconst idList = [ids.pubmed, ids.go, ids.gene, ids.strain, ids.plasmid]\n\nconst getURLPrefix = (item: string) => {\n  let prefix = \"\"\n  switch (item) {\n    case ids.pubmed:\n      prefix = \"/publication/\"\n      break\n    case ids.go:\n      prefix = \"https://www.ebi.ac.uk/QuickGO/term/\"\n      break\n    case ids.gene:\n      prefix = \"/gene/\"\n      break\n    case ids.strain:\n      prefix = \"/stockcenter/strains/\"\n      break\n    case ids.plasmid:\n      prefix = \"/stockcenter/plasmids/\"\n      break\n    default:\n      return prefix\n  }\n  return prefix\n}\n\nconst validateText = (item: string, text: string) => {\n  let valid = false\n  switch (item) {\n    case ids.pubmed:\n      // check if only numbers\n      valid = /^\\d+$/.test(text)\n      break\n    case ids.go:\n      valid = /GO:[0-9]+/.test(text)\n      break\n    case ids.gene:\n      valid = true\n      break\n    case ids.strain:\n      valid = /DBS[0-9]+/.test(text)\n      break\n    case ids.plasmid:\n      valid = /DBP[0-9]+/.test(text)\n      break\n    default:\n      return valid\n  }\n  return valid\n}\n\n/**\n * AutolinkIDsButton displays a button and dropdown for IDs that can be autolinked.\n */\nconst AutolinkIDsButton = () => {\n  const editor = useSlate()\n  const { anchorEl, setAnchorEl, handleMouseDown } = useAnchorElement()\n\n  const handleItemClick = (item: string) => {\n    let link = getLinkSelection(editor)\n    const prefix = getURLPrefix(item)\n    // if the selected text is not a valid ID then throw error\n    if (!validateText(item, link.text)) {\n      alert(`${link.text} is not a valid ID for ${item}`)\n      setAnchorEl(null)\n      return\n    }\n    // if selected link URL doesn't have a prefix then add it\n    if (!link.url.includes(prefix)) {\n      link.url = `${prefix}${link.text}`\n    }\n\n    upsertLink(editor, link)\n    setAnchorEl(null)\n  }\n\n  return (\n    <React.Fragment>\n      <Tooltip title=\"autolinked IDs\">\n        <IconButton\n          size=\"small\"\n          aria-label=\"autolinked IDs\"\n          aria-haspopup=\"true\"\n          onMouseDown={handleMouseDown}>\n          ID\n        </IconButton>\n      </Tooltip>\n      <Menu\n        id=\"autolinked-ids-menu\"\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        MenuListProps={{ disablePadding: true }}\n        onClose={() => setAnchorEl(null)}>\n        {idList.map((item: string, index: number) => {\n          return (\n            <MenuItem key={index} onClick={() => handleItemClick(item)}>\n              {item}\n            </MenuItem>\n          )\n        })}\n      </Menu>\n    </React.Fragment>\n  )\n}\n\nexport { ids, getURLPrefix, validateText }\nexport default AutolinkIDsButton\n","import React from \"react\"\nimport { makeStyles, useTheme, Theme } from \"@material-ui/core/styles\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { HexColorPicker, HexColorInput } from \"react-colorful\"\n\n// get list of preset colors to show beneath picker\nconst getPresetColors = (theme: Theme) => {\n  const { palette } = theme\n  return [\n    palette.primary.main,\n    palette.secondary.main,\n    palette.error.main,\n    palette.warning.main,\n    palette.info.main,\n    palette.success.main,\n  ]\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  buttonContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  button: {\n    width: \"24px\",\n    height: \"24px\",\n    padding: \"0px\",\n    margin: theme.spacing(0.5),\n    cursor: \"pointer\",\n  },\n  input: {\n    width: \"90%\",\n    textTransform: \"uppercase\",\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    borderRadius: \"4px\",\n  },\n  popper: {\n    padding: theme.spacing(2),\n  },\n}))\n\ntype Props = {\n  /** Function to call when color is selected */\n  handleChange: (value: string) => void\n  /** Active color of current text selection */\n  activeColor: string\n}\n\n/**\n * ColorPicker handles the display of the color picker.\n */\nconst ColorPicker = ({ handleChange, activeColor }: Props) => {\n  const theme = useTheme()\n  const classes = useStyles()\n  const presetColors = getPresetColors(theme)\n\n  return (\n    <div className={classes.popper}>\n      <HexColorPicker color={activeColor} onChange={handleChange} />\n      <HexColorInput\n        className={classes.input}\n        color={activeColor}\n        onChange={handleChange}\n      />\n      <div className={classes.buttonContainer}>\n        {presetColors.map((color: string) => (\n          <IconButton\n            key={color}\n            className={classes.button}\n            style={{ backgroundColor: color }}\n            onClick={() => handleChange(color)}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default ColorPicker\n","import { Editor } from \"slate\"\n\n// adds additional check so an inherited font size displays the default \"1rem\"\n// in the dropdown menu\nconst getMarkValue = (value: string) => {\n  if (value === \"inherit\") {\n    return \"1rem\"\n  }\n  return value\n}\n\n// get the current mark for a given selection\nconst getCurrentMark = (editor: Editor, mark: string) => {\n  const marks = Editor.marks(editor)\n  if (!marks || !marks[mark]) {\n    return\n  }\n  return getMarkValue(marks[mark])\n}\n\nexport default getCurrentMark\n","import React from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport Menu from \"@material-ui/core/Menu\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport ColorPicker from \"../dropdowns/ColorPicker\"\nimport useAnchorElement from \"../../hooks/useAnchorElement\"\nimport getCurrentMark from \"../../utils/getCurrentMark\"\nimport { attributes } from \"../../constants/types\"\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * FontColorButton displays a button with associated click logic for selecting\n * a font color.\n */\nconst FontColorButton = ({ icon }: Props) => {\n  const editor = useSlate()\n  const { anchorEl, handleClose, handleMouseDown } = useAnchorElement()\n\n  const handleChange = (value: string) => {\n    Editor.addMark(editor, attributes.fontColor, value)\n  }\n  const activeColor = getCurrentMark(editor, attributes.fontColor) as string\n\n  return (\n    <React.Fragment>\n      <Tooltip title=\"font color\">\n        <IconButton\n          size=\"small\"\n          aria-label=\"font color\"\n          aria-haspopup=\"true\"\n          onMouseDown={handleMouseDown}>\n          {icon}\n        </IconButton>\n      </Tooltip>\n      <Menu\n        id=\"font-color-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        MenuListProps={{ disablePadding: true }}\n        onClose={handleClose}>\n        <div>\n          <ColorPicker handleChange={handleChange} activeColor={activeColor} />\n        </div>\n      </Menu>\n    </React.Fragment>\n  )\n}\n\nexport default FontColorButton\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst CheckIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default CheckIcon\n","const FontFamilyList = [\n  \"Lato\",\n  \"Merriweather\",\n  \"Montserrat\",\n  \"Roboto\",\n  \"Roboto Condensed\",\n  \"Roboto Mono\",\n  \"Roboto Slab\",\n]\n\nconst FontSizeList = [\n  \"0.8rem\",\n  \"0.9rem\",\n  \"1rem\",\n  \"1.1rem\",\n  \"1.2rem\",\n  \"1.3rem\",\n  \"1.4rem\",\n  \"1.5rem\",\n  \"1.8rem\",\n  \"2rem\",\n]\n\nconst LineSpacingList = [\"1.0\", \"1.2\", \"1.5\", \"2.0\", \"2.5\", \"3.0\"]\n\nexport { FontFamilyList, FontSizeList, LineSpacingList }\n","import { Editor, Path, Node } from \"slate\"\n\n// getParentNode is a helper function to get the parent node above the current selection.\nconst getParentNode = (editor: Editor) => {\n  if (!editor.selection) {\n    return\n  }\n\n  // need to get the parent path in order to get the parent node above this selection\n  const currentPath = editor.selection.anchor.path\n  const parentPath = Path.parent(currentPath)\n  const node = Node.get(editor, parentPath)\n\n  return node\n}\n\nexport default getParentNode\n","import React, { MouseEvent } from \"react\"\nimport { Element, Transforms } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Menu from \"@material-ui/core/Menu\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport CheckIcon from \"../icons/CheckIcon\"\nimport { types } from \"../../constants/types\"\nimport { LineSpacingList } from \"../../utils/dropdownValues\"\nimport getParentNode from \"../../utils/getParentNode\"\n\nconst useStyles = makeStyles(() => ({\n  menuItem: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    width: \"75px\",\n  },\n  icon: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n}))\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * LineSpacingButton displays a button with associated click logic for selecting\n * line spacing.\n */\nconst LineSpacingButton = ({ icon }: Props) => {\n  const editor = useSlate()\n  const classes = useStyles()\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n\n  const handleItemClick = (item: string) => {\n    Transforms.setNodes(editor, {\n      type: types.lineSpacing,\n      lineSpacing: item,\n    })\n    setAnchorEl(null)\n  }\n\n  const handleMenuOpen = (event: MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  return (\n    <React.Fragment>\n      <Tooltip title=\"line spacing\">\n        <IconButton\n          size=\"small\"\n          aria-label=\"line spacing\"\n          aria-haspopup=\"true\"\n          onMouseDown={handleMenuOpen}>\n          {icon}\n        </IconButton>\n      </Tooltip>\n      <Menu\n        id=\"line-spacing-menu\"\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        MenuListProps={{ disablePadding: true }}\n        onClose={() => setAnchorEl(null)}>\n        {LineSpacingList.map((item: string, index: number) => {\n          const parentNode = getParentNode(editor)\n          const currentLineSpacing =\n            (Element.isElement(parentNode) && parentNode.lineSpacing) || \"1.5\"\n          return (\n            <MenuItem\n              key={index}\n              onClick={() => handleItemClick(item)}\n              className={classes.menuItem}>\n              <IconButton size=\"small\" className={classes.icon}>\n                {currentLineSpacing === item && <CheckIcon />}\n              </IconButton>\n              {item}\n            </MenuItem>\n          )\n        })}\n      </Menu>\n    </React.Fragment>\n  )\n}\n\nexport default LineSpacingButton\n","import React from \"react\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport useStyles from \"../../styles/dialog\"\nimport { ImageDialogProps } from \"../../types/dialog\"\n\nconst ImageDialog = ({\n  handleAddClick,\n  handleClose,\n  dialogOpen,\n  image,\n  setImage,\n}: ImageDialogProps) => {\n  const classes = useStyles()\n  const [checked, setChecked] = React.useState(false)\n\n  const handleCheckboxChange = () => {\n    setChecked(!checked)\n  }\n\n  return (\n    <Dialog\n      open={dialogOpen}\n      onClose={handleClose}\n      aria-labelledby=\"image-dialog-title\">\n      <DialogTitle id=\"image-dialog-title\">Image Details</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"url\"\n          label=\"URL\"\n          type=\"url\"\n          onChange={(e) =>\n            setImage({\n              ...image,\n              url: e.target.value,\n            })\n          }\n          fullWidth\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"description\"\n          label=\"Description\"\n          type=\"text\"\n          onChange={(e) =>\n            setImage({\n              ...image,\n              description: e.target.value,\n            })\n          }\n          fullWidth\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"width\"\n          label=\"Width (optional)\"\n          type=\"number\"\n          onChange={(e) =>\n            setImage({\n              ...image,\n              width: Number(e.target.value),\n            })\n          }\n          fullWidth\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"height\"\n          label=\"Height (optional)\"\n          type=\"number\"\n          onChange={(e) =>\n            setImage({\n              ...image,\n              height: Number(e.target.value),\n            })\n          }\n          fullWidth\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={handleCheckboxChange}\n              color=\"primary\"\n              name=\"checkedA\"\n            />\n          }\n          label=\"Is this a link?\"\n        />\n        {checked && (\n          <TextField\n            margin=\"dense\"\n            id=\"link\"\n            label=\"Link URL\"\n            type=\"text\"\n            onChange={(e) =>\n              setImage({\n                ...image,\n                linkURL: e.target.value,\n              })\n            }\n            fullWidth\n          />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          className={classes.button}\n          onClick={handleAddClick}\n          variant=\"contained\"\n          color=\"primary\">\n          Add Image\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default ImageDialog\n","import React from \"react\"\nimport { Editor, Transforms } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport ImageDialog from \"../dialogs/ImageDialog\"\nimport { Image } from \"../../types/image\"\nimport { types } from \"../../constants/types\"\nimport useStyles from \"../../styles/buttons\"\n\n// this is necessary to maintain editor selection when image dialog appears;\n// the deselect method unsets the editor selection\nTransforms.deselect = () => {}\n\nconst insertImage = (editor: Editor, image: Image) => {\n  const { url, description, width, height, linkURL } = image\n  const imageData = {\n    type: types.image,\n    url,\n    description,\n    width,\n    height,\n    linkURL,\n    children: [{ text: \"\" }],\n  }\n  Transforms.insertNodes(editor, imageData)\n}\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * ImageButton is a button specifically for adding images.\n */\nconst ImageButton = ({ icon }: Props) => {\n  const editor = useSlate()\n  const [imageDialogOpen, setImageDialogOpen] = React.useState(false)\n  const [image, setImage] = React.useState<Image>({\n    url: \"\",\n    description: \"\",\n  })\n  const props = {\n    active: false,\n  }\n  const classes = useStyles(props)\n\n  const handleAddImage = () => {\n    insertImage(editor, image)\n    setImageDialogOpen(false)\n  }\n\n  // if the user has clicked away without adding the image then we don't need to do anything with their data\n  const handleClose = () => setImageDialogOpen(false)\n\n  return (\n    <React.Fragment>\n      <Tooltip title=\"image\">\n        <IconButton\n          className={classes.button}\n          size=\"small\"\n          aria-label=\"image\"\n          onMouseDown={() => setImageDialogOpen(true)}>\n          {icon}\n        </IconButton>\n      </Tooltip>\n      <ImageDialog\n        handleAddClick={handleAddImage}\n        handleClose={handleClose}\n        dialogOpen={imageDialogOpen}\n        image={image}\n        setImage={setImage}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default ImageButton\n","import React from \"react\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\"\nimport useStyles from \"../../styles/dialog\"\nimport { VideoDialogProps } from \"../../types/dialog\"\n\nconst VideoDialog = ({\n  handleAddClick,\n  handleClose,\n  dialogOpen,\n  video,\n  setVideo,\n}: VideoDialogProps) => {\n  const classes = useStyles()\n\n  return (\n    <Dialog\n      open={dialogOpen}\n      onClose={handleClose}\n      aria-labelledby=\"video-dialog-title\">\n      <DialogTitle id=\"video-dialog-title\">Video Details</DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"url\"\n          label=\"URL\"\n          type=\"url\"\n          onChange={(e) =>\n            setVideo({\n              ...video,\n              url: e.target.value,\n            })\n          }\n          fullWidth\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"width\"\n          label=\"Width (optional)\"\n          type=\"number\"\n          onChange={(e) =>\n            setVideo({\n              ...video,\n              width: Number(e.target.value),\n            })\n          }\n          fullWidth\n        />\n        <TextField\n          margin=\"dense\"\n          id=\"height\"\n          label=\"Height (optional)\"\n          type=\"number\"\n          onChange={(e) =>\n            setVideo({\n              ...video,\n              height: Number(e.target.value),\n            })\n          }\n          fullWidth\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          className={classes.button}\n          onClick={handleAddClick}\n          variant=\"contained\"\n          color=\"primary\">\n          Add Video\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default VideoDialog\n","const youTubeRegex = /(?:youtube\\.com\\/(?:[^/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/+|.*[?&]v=)|youtu\\.be\\/)([^\"&?/ ]{11})/i\nconst vimeoRegex = /\\/\\/(?:www\\.|player\\.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/(?:[^/]*)\\/videos\\/|album\\/(?:\\d+)\\/video\\/|video\\/|)(\\d+)(?:[a-zA-Z0-9_-]+)?/i\n\nconst getVideoID = (url: string) => {\n  let match\n  if (url.includes(\"youtube\")) {\n    match = url.match(youTubeRegex)\n  }\n  if (url.includes(\"vimeo\")) {\n    match = url.match(vimeoRegex)\n  }\n  if (match && match.length > 0) {\n    return match[1]\n  }\n\n  alert(\"Can only accept YouTube or Vimeo URL\")\n  return url\n}\n\nexport default getVideoID\n","import React from \"react\"\nimport { Editor, Transforms } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport VideoDialog from \"../dialogs/VideoDialog\"\nimport { types } from \"../../constants/types\"\nimport { Video } from \"../../types/video\"\nimport useStyles from \"../../styles/buttons\"\nimport getVideoID from \"../../utils/getVideoID\"\n\n// this is necessary to maintain editor selection when video dialog appears;\n// the deselect method unsets the editor selection\nTransforms.deselect = () => {}\n\n/**\n * addVideo inserts a new video node.\n */\nconst addVideo = (editor: Editor, video: Video) => {\n  const { url, width, height } = video\n  let transformedURL = url\n  const videoID = getVideoID(url)\n  if (url.match(/youtube\\.com/)) {\n    transformedURL = `https://www.youtube.com/embed/${videoID}`\n  }\n  if (url.match(/vimeo\\.com/)) {\n    transformedURL = `https://player.vimeo.com/video/${videoID}`\n  }\n  const videoData = {\n    type: types.video,\n    url: transformedURL,\n    width,\n    height,\n    children: [{ text: \"\" }],\n  }\n  Transforms.insertNodes(editor, videoData)\n}\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * VideoButton is a button specifically for adding videos.\n */\nconst VideoButton = ({ icon }: Props) => {\n  const editor = useSlate()\n  const [videoDialogOpen, setVideoDialogOpen] = React.useState(false)\n  const [video, setVideo] = React.useState<Video>({\n    url: \"\",\n  })\n  const props = {\n    active: false,\n  }\n  const classes = useStyles(props)\n\n  const handleAddVideo = () => {\n    addVideo(editor, video)\n    setVideoDialogOpen(false)\n  }\n\n  // if the user has clicked away without adding the video then we don't need to do anything with their data\n  const handleClose = () => setVideoDialogOpen(false)\n\n  return (\n    <React.Fragment>\n      <Tooltip title=\"video\">\n        <IconButton\n          className={classes.button}\n          size=\"small\"\n          aria-label=\"video\"\n          onMouseDown={() => setVideoDialogOpen(true)}>\n          {icon}\n        </IconButton>\n      </Tooltip>\n      <VideoDialog\n        handleAddClick={handleAddVideo}\n        handleClose={handleClose}\n        dialogOpen={videoDialogOpen}\n        video={video}\n        setVideo={setVideo}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default VideoButton\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst ScientificSymbolIcon = () => {\n  return (\n    <SvgIcon>\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M14 20v-2.157c1.863-1.192 3.5-3.875 3.5-6.959 0-3.073-2-6.029-5.5-6.029s-5.5 2.956-5.5 6.03c0 3.083 1.637 5.766 3.5 6.958V20H3v-2h4.76C5.666 16.505 4 13.989 4 10.884 4 6.247 7.5 3 12 3s8 3.247 8 7.884c0 3.105-1.666 5.621-3.76 7.116H21v2h-7z\" />\n    </SvgIcon>\n  )\n}\n\nexport default ScientificSymbolIcon\n","import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport Popper from \"@material-ui/core/Popper\"\nimport ScientificSymbolIcon from \"../icons/ScientificSymbolIcon\"\n\nconst getSymbolsList = () => {\n  const start = 0x0391\n  const end = 0x03c9\n  const symbols = []\n  for (let i = start; i < end; i++) {\n    symbols.push(String.fromCharCode(i))\n  }\n  return symbols\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  popper: {\n    marginTop: theme.spacing(1.5),\n    backgroundColor: theme.palette.grey[100],\n    width: \"400px\",\n  },\n  button: {\n    borderRadius: \"0px\",\n    border: `1px solid ${theme.palette.grey[200]}`,\n    width: \"21px\",\n  },\n}))\n\n/**\n * ScientificSymbolsButton displays a button and popper for scientific symbols.\n */\nconst ScientificSymbolsButton = () => {\n  const editor = useSlate()\n  const classes = useStyles()\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n\n  const handleItemClick = (item: string) => {\n    Editor.insertText(editor, item)\n    setAnchorEl(null)\n  }\n\n  const handleMenuOpen = (event: MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const symbols = getSymbolsList()\n  const open = Boolean(anchorEl)\n\n  return (\n    <React.Fragment>\n      <Tooltip title=\"scientific symbols\">\n        <IconButton\n          size=\"small\"\n          aria-label=\"scientific symbols\"\n          aria-haspopup=\"true\"\n          onMouseDown={handleMenuOpen}>\n          <ScientificSymbolIcon />\n        </IconButton>\n      </Tooltip>\n      <Popper\n        className={classes.popper}\n        id={open ? \"symbol-popper\" : undefined}\n        open={open}\n        anchorEl={anchorEl}>\n        {symbols.map((item: string, index: number) => {\n          return (\n            <IconButton\n              className={classes.button}\n              key={index}\n              onClick={() => handleItemClick(item)}\n              size=\"small\">\n              {item}\n            </IconButton>\n          )\n        })}\n      </Popper>\n    </React.Fragment>\n  )\n}\n\nexport default ScientificSymbolsButton\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst BoldIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default BoldIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst ItalicIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z\" />\n    </SvgIcon>\n  )\n}\n\nexport default ItalicIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst StrikethroughIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M10 19h4v-3h-4v3zM5 4v3h5v3h4V7h5V4H5zM3 14h18v-2H3v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default StrikethroughIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst SubscriptIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M22,18h-2v1h3v1h-4v-2c0-0.55,0.45-1,1-1h2v-1h-3v-1h3c0.55,0,1,0.45,1,1v1C23,17.55,22.55,18,22,18z M5.88,18h2.66 l3.4-5.42h0.12l3.4,5.42h2.66l-4.65-7.27L17.81,4h-2.68l-3.07,4.99h-0.12L8.85,4H6.19l4.32,6.73L5.88,18z\" />\n    </SvgIcon>\n  )\n}\n\nexport default SubscriptIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst SuperscriptIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M22,7h-2v1h3v1h-4V7c0-0.55,0.45-1,1-1h2V5h-3V4h3c0.55,0,1,0.45,1,1v1C23,6.55,22.55,7,22,7z M5.88,20h2.66l3.4-5.42h0.12 l3.4,5.42h2.66l-4.65-7.27L17.81,6h-2.68l-3.07,4.99h-0.12L8.85,6H6.19l4.32,6.73L5.88,20z\" />\n    </SvgIcon>\n  )\n}\n\nexport default SuperscriptIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst UnderlinedIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default UnderlinedIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H1Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14h-2V9h-2V7h4v10z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H1Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H2Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 8c0 1.11-.9 2-2 2h-2v2h4v2H9v-4c0-1.11.9-2 2-2h2V9H9V7h4c1.1 0 2 .89 2 2v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H2Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H3Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M.01 0h24v24h-24z\" fill=\"none\" />\n      <path d=\"M19.01 3h-14c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 7.5c0 .83-.67 1.5-1.5 1.5.83 0 1.5.67 1.5 1.5V15c0 1.11-.9 2-2 2h-4v-2h4v-2h-2v-2h2V9h-4V7h4c1.1 0 2 .89 2 2v1.5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H3Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst LinkIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default LinkIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst DividerIcon = () => {\n  return (\n    <SvgIcon>\n      <rect fill=\"none\" fillRule=\"evenodd\" height=\"24\" width=\"24\" />\n      <rect fillRule=\"evenodd\" height=\"2\" width=\"16\" x=\"4\" y=\"11\" />\n    </SvgIcon>\n  )\n}\n\nexport default DividerIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst LineSpacingIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M6 7h2.5L5 3.5 1.5 7H4v10H1.5L5 20.5 8.5 17H6V7zm4-2v2h12V5H10zm0 14h12v-2H10v2zm0-6h12v-2H10v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default LineSpacingIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst ImageIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default ImageIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst VideoIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z\" />\n    </SvgIcon>\n  )\n}\n\nexport default VideoIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst UnorderedListIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n      <path d=\"M4 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-6c-.83 0-1.5.67-1.5 1.5S3.17 7.5 4 7.5 5.5 6.83 5.5 6 4.83 4.5 4 4.5zm0 12c-.83 0-1.5.68-1.5 1.5s.68 1.5 1.5 1.5 1.5-.68 1.5-1.5-.67-1.5-1.5-1.5zM7 19h14v-2H7v2zm0-6h14v-2H7v2zm0-8v2h14V5H7z\" />\n    </SvgIcon>\n  )\n}\n\nexport default UnorderedListIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst OrderedListIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default OrderedListIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst IndentIncreaseIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3 21h18v-2H3v2zM3 8v8l4-4-4-4zm8 9h10v-2H11v2zM3 3v2h18V3H3zm8 6h10V7H11v2zm0 4h10v-2H11v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default IndentIncreaseIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst IndentDecreaseIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M11 17h10v-2H11v2zm-8-5l4 4V8l-4 4zm0 9h18v-2H3v2zM3 3v2h18V3H3zm8 6h10V7H11v2zm0 4h10v-2H11v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default IndentDecreaseIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignLeftIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignLeftIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignCenterIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignCenterIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignRightIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignRightIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignJustifyIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3 21h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18V7H3v2zm0-6v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignJustifyIcon\n","import React from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport Select from \"@material-ui/core/Select\"\nimport getCurrentMark from \"../../utils/getCurrentMark\"\n\ntype StyleProps = {\n  /** Minimum width of dropdown */\n  minWidth: string\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  dropdown: (props: StyleProps) => ({\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    marginTop: \"0px\",\n    marginBottom: \"0px\",\n    minWidth: props.minWidth,\n  }),\n}))\n\ntype Props = {\n  /** List of values to display in dropdown */\n  values: string[]\n  /** Default value of dropdown */\n  defaultValue: string\n  /** Mark to add to Slate data */\n  mark: string\n  /** Minimum width of dropdown */\n  minWidth?: string\n}\n\nconst Dropdown = ({\n  values,\n  defaultValue,\n  mark,\n  minWidth = \"150px\",\n}: Props) => {\n  const editor = useSlate()\n  const props = { minWidth }\n  const classes = useStyles(props)\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    Editor.addMark(editor, mark, event.target.value)\n  }\n\n  return (\n    <FormControl className={classes.dropdown}>\n      <Select\n        value={getCurrentMark(editor, mark) || defaultValue}\n        onChange={handleChange}>\n        {values.map((val) => (\n          <MenuItem key={val} value={val} style={{ [mark]: val }}>\n            {val}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default Dropdown\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst FontColorIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M2,20h20v4H2V20z M5.49,17h2.42l1.27-3.58h5.65L16.09,17h2.42L13.25,3h-2.5L5.49,17z M9.91,11.39l2.03-5.79h0.12l2.03,5.79 H9.91z\" />\n    </SvgIcon>\n  )\n}\n\nexport default FontColorIcon\n","import { Editor, Element as SlateElement, Transforms } from \"slate\"\nimport { isBlockActive } from \"./blocks\"\nimport { types } from \"../constants/types\"\n\n/**\n * toggleList toggles the given selection as a list type.\n */\nconst toggleList = (editor: Editor, format: string) => {\n  // first find if the selected block is currently active\n  const isActive = isBlockActive(editor, \"type\", format)\n\n  Transforms.unwrapNodes(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\n    split: true,\n  })\n\n  const type = isActive ? types.paragraph : types.listItem\n\n  Transforms.setNodes(editor, {\n    type: type,\n  })\n\n  if (!isActive) {\n    const block = { type: format, children: [] }\n    Transforms.wrapNodes(editor, block)\n  }\n}\n\nexport { toggleList }\n","import { Editor, Element, Node, Point, Range, Transforms } from \"slate\"\nimport { types } from \"../constants/types\"\n\n// helper function to check for ul/ol match\nconst parentListMatch = (n: Node) =>\n  (!Editor.isEditor(n) &&\n    Element.isElement(n) &&\n    n.type === types.orderedList) ||\n  (!Editor.isEditor(n) &&\n    Element.isElement(n) &&\n    n.type === types.unorderedList)\n\n// helper function to check for li match\nconst listItemMatch = (n: Node) =>\n  !Editor.isEditor(n) && Element.isElement(n) && n.type === types.listItem\n\n// helper function to get matching ul/ol node\nconst findMatchingList = (editor: Editor) => {\n  const [listMatch] = Array.from(\n    Editor.nodes(editor, {\n      match: (n) => parentListMatch(n),\n    }),\n  )\n  return listMatch\n}\n\n// helper function to get matching li node\nconst findMatchingListItem = (editor: Editor) => {\n  const [match] = Array.from(\n    Editor.nodes(editor, {\n      match: (n) => listItemMatch(n),\n    }),\n  )\n  return match\n}\n\nconst setParagraphNode = (editor: Editor) => {\n  Transforms.setNodes(\n    editor,\n    { type: types.paragraph },\n    {\n      match: (n) => listItemMatch(n),\n    },\n  )\n}\n\n// helper function called when user escapes out of list\nconst liftNodes = (editor: Editor) => {\n  // check for new parent\n  const listMatch = findMatchingList(editor)\n  // verify there is an active list to lift the nodes\n  if (listMatch) {\n    // lift the list item node to next parent\n    Transforms.liftNodes(editor, {\n      match: (n) => listItemMatch(n),\n    })\n  }\n}\n\nconst handleLists = (editor: Editor, callback: () => void) => {\n  const { selection } = editor\n\n  // check that there is a current selection without highlight\n  if (selection && Range.isCollapsed(selection)) {\n    // find the closest list item element\n    const [match] = Array.from(\n      Editor.nodes(editor, {\n        match: (n) =>\n          listItemMatch(n) &&\n          n.children &&\n          n.children[0] &&\n          (!n.children[0].text || n.children[0].text === \"\"),\n      }),\n    )\n\n    // check that there was a match\n    if (match) {\n      const [, path] = match\n      const start = Editor.start(editor, path)\n\n      // if the selection is at the beginning of the list item\n      if (Point.equals(selection.anchor, start)) {\n        // lift the list item to the next parent\n        liftNodes(editor)\n        // check for the new parent\n        const listMatch = findMatchingList(editor)\n        // if it is no longer within a ul/ol, turn into normal paragraph\n        if (!listMatch) {\n          setParagraphNode(editor)\n        }\n        return\n      }\n    }\n  }\n\n  callback()\n}\n\n/**\n * withLists modifies the logic for inserting a line break inside lists.\n */\nconst withLists = (editor: Editor) => {\n  const { insertBreak, deleteBackward } = editor\n\n  editor.insertBreak = () => {\n    handleLists(editor, insertBreak)\n  }\n\n  editor.deleteBackward = (...args) => {\n    handleLists(editor, () => deleteBackward(...args))\n  }\n\n  return editor\n}\n\nconst indentItem = (editor: Editor) => {\n  const { selection } = editor\n\n  // check that there is a current selection without highlight\n  if (selection && Range.isCollapsed(selection)) {\n    const match = findMatchingListItem(editor)\n\n    if (match) {\n      const [listMatch] = Array.from(\n        Editor.nodes(editor, {\n          mode: \"lowest\",\n          match: (n) => parentListMatch(n),\n        }),\n      )\n\n      if (listMatch) {\n        let depth = listMatch[1].length\n        if (depth <= 5 && Element.isElement(listMatch[0])) {\n          Transforms.wrapNodes(editor, {\n            type: listMatch[0].type,\n            children: [],\n          })\n        }\n      }\n    } else {\n      // if the user is hitting tab and not inside a list, insert spaces\n      editor.insertText(\"    \")\n    }\n  }\n}\n\nconst undentItem = (editor: Editor) => {\n  const { selection } = editor\n\n  if (selection && Range.isCollapsed(selection)) {\n    const match = findMatchingListItem(editor)\n\n    if (match) {\n      liftNodes(editor)\n      const listMatch = findMatchingList(editor)\n\n      // if it is no longer within an active list, turn into paragraph\n      if (!listMatch) {\n        setParagraphNode(editor)\n      }\n    }\n  }\n}\n\nexport { undentItem, indentItem }\nexport default withLists\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst TableIcon = () => {\n  return (\n    <SvgIcon>\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M13 10v4h6v-4h-6zm-2 0H5v4h6v-4zm2 9h6v-3h-6v3zm-2 0v-3H5v3h6zm2-14v3h6V5h-6zm-2 0H5v3h6V5zM4 3h16a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z\" />\n    </SvgIcon>\n  )\n}\n\nexport default TableIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst TableInsertColumnIcon = () => {\n  return (\n    <SvgIcon>\n      <path fill=\"none\" d=\"M0 0H24V24H0z\" />\n      <path d=\"M10 3c.552 0 1 .448 1 1v16c0 .552-.448 1-1 1H4c-.552 0-1-.448-1-1V4c0-.552.448-1 1-1h6zM9 5H5v14h4V5zm9 2c2.761 0 5 2.239 5 5s-2.239 5-5 5-5-2.239-5-5 2.239-5 5-5zm1 2h-2v1.999L15 11v2l2-.001V15h2v-2.001L21 13v-2l-2-.001V9z\" />\n    </SvgIcon>\n  )\n}\n\nexport default TableInsertColumnIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst TableInsertRowIcon = () => {\n  return (\n    <SvgIcon>\n      <path fill=\"none\" d=\"M0 0H24V24H0z\" />\n      <path d=\"M12 13c2.761 0 5 2.239 5 5s-2.239 5-5 5-5-2.239-5-5 2.239-5 5-5zm1 2h-2v1.999L9 17v2l2-.001V21h2v-2.001L15 19v-2l-2-.001V15zm7-12c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1H4c-.552 0-1-.448-1-1V4c0-.552.448-1 1-1h16zM5 5v4h14V5H5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default TableInsertRowIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst TableDeleteColumnIcon = () => {\n  return (\n    <SvgIcon>\n      <path fill=\"none\" d=\"M0 0H24V24H0z\" />\n      <path d=\"M12 3c.552 0 1 .448 1 1v8c.835-.628 1.874-1 3-1 2.761 0 5 2.239 5 5s-2.239 5-5 5c-1.032 0-1.99-.313-2.787-.848L13 20c0 .552-.448 1-1 1H6c-.552 0-1-.448-1-1V4c0-.552.448-1 1-1h6zm-1 2H7v14h4V5zm8 10h-6v2h6v-2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default TableDeleteColumnIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst TableDeleteRowIcon = () => {\n  return (\n    <SvgIcon>\n      <path fill=\"none\" d=\"M0 0H24V24H0z\" />\n      <path d=\"M20 5c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1 .628.835 1 1.874 1 3 0 2.761-2.239 5-5 5s-5-2.239-5-5c0-1.126.372-2.165 1-3H4c-.552 0-1-.448-1-1V6c0-.552.448-1 1-1h16zm-7 10v2h6v-2h-6zm6-8H5v4h14V7z\" />\n    </SvgIcon>\n  )\n}\n\nexport default TableDeleteRowIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst DeleteIcon = () => {\n  return (\n    <SvgIcon>\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M17 6h5v2h-2v13a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V8H2V6h5V3a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v3zm1 2H6v12h12V8zm-9 3h2v6H9v-6zm4 0h2v6h-2v-6zM9 4v2h6V4H9z\" />\n    </SvgIcon>\n  )\n}\n\nexport default DeleteIcon\n","import { Editor, Element as SlateElement, Path, Transforms } from \"slate\"\nimport { isBlockActive } from \"./blocks\"\nimport { types } from \"../constants/types\"\n\nconst getNodeAbove = (editor: Editor, type: string) => {\n  const ancestor = Editor.above(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === type,\n  })\n  return ancestor\n}\n\nconst getEmptyTableCell = () => ({\n  type: types.tableCell,\n  children: [\n    {\n      type: types.paragraph,\n      children: [{ text: \" \" }],\n    },\n  ],\n})\n\nconst getEmptyTableRow = (count: number) => ({\n  type: types.tableRow,\n  children: Array(count)\n    .fill(\"\")\n    .map(() => getEmptyTableCell()),\n})\n\nconst getEmptyTable = (row: number, col: number) => ({\n  type: types.tableWrap,\n  children: [\n    {\n      type: types.table,\n      row,\n      col,\n      children: Array(row)\n        .fill(\" \")\n        .map(() => getEmptyTableRow(col)),\n    },\n    {\n      type: types.paragraph,\n      children: [{ text: \"\" }],\n    },\n  ],\n})\n\nconst insertTable = (editor: Editor) => {\n  if (!isBlockActive(editor, \"type\", types.table)) {\n    Transforms.insertNodes(editor, getEmptyTable(1, 2))\n  }\n}\n\nconst insertTableRow = (editor: Editor) => {\n  const currentRow = getNodeAbove(editor, types.tableRow)\n  if (currentRow === undefined) {\n    return\n  }\n\n  const [, rowPath] = currentRow\n  const [tableNode, tablePath] = Editor.parent(editor, rowPath)\n  if (!SlateElement.isElement(tableNode)) {\n    return\n  }\n\n  const col = tableNode.col as number\n  const row = tableNode.row as number\n\n  Transforms.insertNodes(editor, getEmptyTableRow(col), {\n    at: Path.next(rowPath),\n  })\n\n  Transforms.setNodes(editor, { row: row + 1 }, { at: tablePath })\n}\n\nconst insertTableColumn = (editor: Editor) => {\n  const currentCell = getNodeAbove(editor, types.tableCell)\n  if (currentCell === undefined) {\n    return\n  }\n  const currentTable = getNodeAbove(editor, types.table)\n  if (currentTable === undefined) {\n    return\n  }\n\n  const [, cellPath] = currentCell\n  const [tableNode, tablePath] = currentTable\n\n  // get next item in path where new cell should be located\n  const nextCellPath = Path.next(cellPath)\n  // get copy of next cell path to change index later\n  const newCellPath = nextCellPath.slice()\n  // find path position to enter new cell\n  const replacePathPos = newCellPath.length - 2\n  // get index of current row using this path position\n  const currentRowIndex = newCellPath[replacePathPos]\n\n  if (!SlateElement.isElement(tableNode)) {\n    return\n  }\n\n  // loop over table node and insert empty cells at given path\n  tableNode.children.forEach(\n    // @ts-ignore <-- used because we don't need the first val here\n    (_, index: number) => {\n      // replace path position in new cell path with the current index\n      newCellPath[replacePathPos] = index\n      // insert an empty table cell at this position\n      Transforms.insertNodes(editor, getEmptyTableCell(), {\n        at: newCellPath,\n        select: index === currentRowIndex,\n      })\n    },\n  )\n  // update col attribute for table node\n  Transforms.setNodes(\n    editor,\n    { col: Number(tableNode.col) + 1 },\n    {\n      at: tablePath,\n    },\n  )\n}\n\nconst deleteTable = (editor: Editor) => {\n  const tableMatch = getNodeAbove(editor, types.tableWrap)\n\n  if (tableMatch) {\n    Transforms.removeNodes(editor, {\n      at: tableMatch[1],\n    })\n  }\n}\n\nconst deleteTableRow = (editor: Editor) => {\n  const currentRow = getNodeAbove(editor, types.tableRow)\n  if (currentRow === undefined) {\n    return\n  }\n\n  const [, rowPath] = currentRow\n  const [tableNode, tablePath] = Editor.parent(editor, rowPath)\n\n  if (!SlateElement.isElement(tableNode)) {\n    return\n  }\n\n  const row = Number(tableNode.row)\n\n  // if there's only one row in the table then safely remove the table\n  if (row === 1) {\n    deleteTable(editor)\n    return\n  }\n  // otherwise remove the nodes at the row path and then set table node's\n  // row attribute to one less\n  Transforms.removeNodes(editor, {\n    at: rowPath,\n  })\n  Transforms.setNodes(\n    editor,\n    {\n      row: row - 1,\n    },\n    {\n      at: tablePath,\n    },\n  )\n}\n\nconst deleteTableColumn = (editor: Editor) => {\n  const currentCell = getNodeAbove(editor, types.tableCell)\n  if (currentCell === undefined) {\n    return\n  }\n  const currentTable = getNodeAbove(editor, types.table)\n  if (currentTable === undefined) {\n    return\n  }\n\n  const [, cellPath] = currentCell\n  const [tableNode, tablePath] = currentTable\n\n  if (!SlateElement.isElement(tableNode)) {\n    return\n  }\n\n  const col = Number(tableNode.col)\n\n  if (col === 1) {\n    deleteTable(editor)\n    return\n  }\n\n  const pathToDelete = cellPath.slice()\n  const replacePathPos = pathToDelete.length - 2\n  // @ts-ignore <-- use to ignore unneeded value\n  tableNode.children.forEach((_, index: number) => {\n    pathToDelete[replacePathPos] = index\n    Transforms.removeNodes(editor, {\n      at: pathToDelete,\n    })\n  })\n\n  Transforms.setNodes(\n    editor,\n    {\n      col: col - 1,\n    },\n    {\n      at: tablePath,\n    },\n  )\n}\n\nexport {\n  insertTable,\n  insertTableRow,\n  insertTableColumn,\n  deleteTable,\n  deleteTableRow,\n  deleteTableColumn,\n}\n","import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport BlockButton from \"./BlockButton\"\nimport TableIcon from \"../icons/TableIcon\"\nimport TableInsertColumnIcon from \"../icons/TableInsertColumnIcon\"\nimport TableInsertRowIcon from \"../icons/TableInsertRowIcon\"\nimport TableDeleteColumnIcon from \"../icons/TableDeleteColumnIcon\"\nimport TableDeleteRowIcon from \"../icons/TableDeleteRowIcon\"\nimport DeleteIcon from \"../icons/DeleteIcon\"\n// import BorderColorIcon from \"../icons/BorderColorIcon\"\n// import TableBorderButton from \"./TableBorderButton\"\nimport { isBlockActive } from \"../../utils/blocks\"\nimport useStyles from \"../../styles/buttons\"\nimport { types } from \"../../constants/types\"\nimport {\n  insertTable,\n  insertTableRow,\n  insertTableColumn,\n  deleteTable,\n  deleteTableRow,\n  deleteTableColumn,\n} from \"../../utils/tables\"\n\nconst tableButtons = (editor: Editor) => [\n  {\n    format: types.tableColumn,\n    icon: <TableInsertColumnIcon />,\n    callback: () => insertTableColumn(editor),\n  },\n  {\n    format: types.tableRow,\n    icon: <TableInsertRowIcon />,\n    callback: () => insertTableRow(editor),\n  },\n  {\n    format: types.tableColumnDelete,\n    icon: <TableDeleteColumnIcon />,\n    callback: () => deleteTableColumn(editor),\n  },\n  {\n    format: types.tableRowDelete,\n    icon: <TableDeleteRowIcon />,\n    callback: () => deleteTableRow(editor),\n  },\n  {\n    format: types.tableDelete,\n    icon: <DeleteIcon />,\n    callback: () => deleteTable(editor),\n  },\n]\n\n/**\n * TableButtons handles the display logic for the table buttons in the toolbar.\n */\nconst TableButtons = () => {\n  const editor = useSlate()\n  const active = isBlockActive(editor, \"type\", types.tableWrap)\n  const props = {\n    active: active,\n  }\n  const classes = useStyles(props)\n\n  // when button is clicked, toggle the block within the editor\n  const handleMouseDown = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    insertTable(editor)\n  }\n\n  return (\n    <React.Fragment>\n      <Tooltip title={types.table}>\n        <IconButton\n          className={classes.button}\n          size=\"small\"\n          aria-label={types.table}\n          // use onMouseDown to avoid editor selection becoming null\n          // and losing cursor position\n          onMouseDown={handleMouseDown}>\n          <TableIcon />\n        </IconButton>\n      </Tooltip>\n      {active && (\n        <React.Fragment>\n          {tableButtons(editor).map((item) => (\n            <BlockButton\n              format={item.format}\n              icon={item.icon}\n              clickFn={item.callback}\n              key={item.format}\n            />\n          ))}\n          {/* <TableBorderButton icon={<BorderColorIcon />} /> */}\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default TableButtons\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nconst useStyles = makeStyles({\n  separator: {\n    borderLeftColor: \"#c1c1c1\",\n    borderLeftStyle: \"solid\",\n    borderLeftWidth: \"1px\",\n    display: \"inline-block\",\n    height: \"20px\",\n    verticalAlign: \"middle\",\n  },\n})\n\nconst Separator = () => {\n  const classes = useStyles()\n\n  return <div className={classes.separator} />\n}\n\nexport default Separator\n","import React from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Grid from \"@material-ui/core/Grid\"\nimport MarkButton from \"./buttons/MarkButton\"\nimport BlockButton from \"./buttons/BlockButton\"\nimport AlignButton from \"./buttons/AlignButton\"\nimport LinkButton from \"./buttons/LinkButton\"\nimport AutolinkIDsButton from \"./buttons/AutolinkIDsButton\"\nimport FontColorButton from \"./buttons/FontColorButton\"\nimport LineSpacingButton from \"./buttons/LineSpacingButton\"\nimport ImageButton from \"./buttons/ImageButton\"\nimport VideoButton from \"./buttons/VideoButton\"\nimport ScientificSymbolsButton from \"./buttons/ScientificSymbolsButton\"\n// mark icons\nimport BoldIcon from \"./icons/BoldIcon\"\nimport ItalicIcon from \"./icons/ItalicIcon\"\nimport StrikethroughIcon from \"./icons/StrikethroughIcon\"\nimport SubscriptIcon from \"./icons/SubscriptIcon\"\nimport SuperscriptIcon from \"./icons/SuperscriptIcon\"\nimport UnderlinedIcon from \"./icons/UnderlinedIcon\"\n// block icons\nimport H1Icon from \"./icons/H1Icon\"\nimport H2Icon from \"./icons/H2Icon\"\nimport H3Icon from \"./icons/H3Icon\"\nimport LinkIcon from \"./icons/LinkIcon\"\nimport DividerIcon from \"./icons/DividerIcon\"\nimport LineSpacingIcon from \"./icons/LineSpacingIcon\"\nimport ImageIcon from \"./icons/ImageIcon\"\nimport VideoIcon from \"./icons/VideoIcon\"\nimport UnorderedListIcon from \"./icons/UnorderedListIcon\"\nimport OrderedListIcon from \"./icons/OrderedListIcon\"\nimport IndentIncreaseIcon from \"./icons/IndentIncreaseIcon\"\nimport IndentDecreaseIcon from \"./icons/IndentDecreaseIcon\"\n// align icons\nimport AlignLeftIcon from \"./icons/AlignLeftIcon\"\nimport AlignCenterIcon from \"./icons/AlignCenterIcon\"\nimport AlignRightIcon from \"./icons/AlignRightIcon\"\nimport AlignJustifyIcon from \"./icons/AlignJustifyIcon\"\n// dropdowns\nimport Dropdown from \"./dropdowns/Dropdown\"\nimport FontColorIcon from \"./icons/FontColorIcon\"\n// utils\nimport { FontFamilyList, FontSizeList } from \"../utils/dropdownValues\"\n// types\nimport { types, alignments } from \"../constants/types\"\nimport { toggleBlock } from \"../utils/blocks\"\nimport { toggleList } from \"../utils/lists\"\nimport { indentItem, undentItem } from \"../plugins/withLists\"\nimport TableButtons from \"./buttons/TableButtons\"\nimport Separator from \"./Separator\"\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    marginBottom: theme.spacing(1),\n  },\n  toolbar: {\n    position: \"sticky\",\n    top: 0,\n    cursor: \"default\",\n  },\n  divider: {\n    marginLeft: theme.spacing(0.5),\n    marginRight: theme.spacing(0.5),\n  },\n}))\n\nconst listButtons = (editor: Editor) => [\n  {\n    format: types.unorderedList,\n    icon: <UnorderedListIcon />,\n    callback: () => toggleList(editor, types.unorderedList),\n  },\n  {\n    format: types.orderedList,\n    icon: <OrderedListIcon />,\n    callback: () => toggleList(editor, types.orderedList),\n  },\n  {\n    format: types.indentIncrease,\n    icon: <IndentIncreaseIcon />,\n    callback: () => indentItem(editor),\n  },\n  {\n    format: types.indentDecrease,\n    icon: <IndentDecreaseIcon />,\n    callback: () => undentItem(editor),\n  },\n]\n\n/**\n * Toolbar is the display for the editor toolbar.\n */\nconst EditorToolbar = () => {\n  const editor = useSlate()\n  const classes = useStyles()\n\n  return (\n    <AppBar color=\"default\" position=\"static\" className={classes.container}>\n      <Toolbar disableGutters variant=\"dense\" className={classes.toolbar}>\n        <Grid container>\n          <Grid item xs={12}>\n            <MarkButton format={types.bold} icon={<BoldIcon />} />\n            <MarkButton format={types.italic} icon={<ItalicIcon />} />\n            <MarkButton format={types.underline} icon={<UnderlinedIcon />} />\n            <MarkButton\n              format={types.strikethrough}\n              icon={<StrikethroughIcon />}\n            />\n            <MarkButton format={types.subscript} icon={<SubscriptIcon />} />\n            <MarkButton format={types.superscript} icon={<SuperscriptIcon />} />\n            <Separator />\n            <BlockButton\n              format={types.h1}\n              icon={<H1Icon />}\n              clickFn={() => toggleBlock(editor, types.h1)}\n            />\n            <BlockButton\n              format={types.h2}\n              icon={<H2Icon />}\n              clickFn={() => toggleBlock(editor, types.h2)}\n            />\n            <BlockButton\n              format={types.h3}\n              icon={<H3Icon />}\n              clickFn={() => toggleBlock(editor, types.h3)}\n            />\n            <LinkButton icon={<LinkIcon />} />\n            <AutolinkIDsButton />\n            <Separator />\n            <AlignButton align={alignments.left} icon={<AlignLeftIcon />} />\n            <AlignButton align={alignments.center} icon={<AlignCenterIcon />} />\n            <AlignButton align={alignments.right} icon={<AlignRightIcon />} />\n            <AlignButton\n              align={alignments.justify}\n              icon={<AlignJustifyIcon />}\n            />\n            <BlockButton\n              format={types.divider}\n              icon={<DividerIcon />}\n              clickFn={() => toggleBlock(editor, types.divider)}\n            />\n            <Separator />\n            {listButtons(editor).map((item) => (\n              <BlockButton\n                format={item.format}\n                icon={item.icon}\n                clickFn={item.callback}\n                key={item.format}\n              />\n            ))}\n            <Separator />\n            <TableButtons />\n            <Separator />\n            <LineSpacingButton icon={<LineSpacingIcon />} />\n            <ImageButton icon={<ImageIcon />} />\n            <VideoButton icon={<VideoIcon />} />\n            <Separator />\n            <FontColorButton icon={<FontColorIcon />} />\n            <ScientificSymbolsButton />\n            <Dropdown\n              mark=\"fontFamily\"\n              defaultValue=\"Roboto\"\n              values={FontFamilyList}\n            />\n            <Dropdown\n              mark=\"fontSize\"\n              defaultValue=\"1rem\"\n              values={FontSizeList}\n              minWidth=\"90px\"\n            />\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default EditorToolbar\n","import React from \"react\"\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Grid from \"@material-ui/core/Grid\"\nimport MarkButton from \"./buttons/MarkButton\"\nimport LinkButton from \"./buttons/LinkButton\"\nimport AutolinkIDsButton from \"./buttons/AutolinkIDsButton\"\nimport ScientificSymbolsButton from \"./buttons/ScientificSymbolsButton\"\nimport BoldIcon from \"./icons/BoldIcon\"\nimport ItalicIcon from \"./icons/ItalicIcon\"\nimport StrikethroughIcon from \"./icons/StrikethroughIcon\"\nimport SubscriptIcon from \"./icons/SubscriptIcon\"\nimport SuperscriptIcon from \"./icons/SuperscriptIcon\"\nimport UnderlinedIcon from \"./icons/UnderlinedIcon\"\nimport LinkIcon from \"./icons/LinkIcon\"\nimport { types } from \"../constants/types\"\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    marginBottom: theme.spacing(1),\n  },\n  toolbar: {\n    position: \"sticky\",\n    top: 0,\n    cursor: \"default\",\n  },\n}))\n\n/**\n * InlineToolbar is a condensed toolbar used for inline editing.\n */\nconst InlineToolbar = () => {\n  const classes = useStyles()\n\n  return (\n    <AppBar color=\"default\" position=\"static\" className={classes.container}>\n      <Toolbar disableGutters variant=\"dense\" className={classes.toolbar}>\n        <Grid container>\n          <Grid item xs={12}>\n            <MarkButton format={types.bold} icon={<BoldIcon />} />\n            <MarkButton format={types.italic} icon={<ItalicIcon />} />\n            <MarkButton format={types.underline} icon={<UnderlinedIcon />} />\n            <MarkButton\n              format={types.strikethrough}\n              icon={<StrikethroughIcon />}\n            />\n            <MarkButton format={types.subscript} icon={<SubscriptIcon />} />\n            <MarkButton format={types.superscript} icon={<SuperscriptIcon />} />\n            <LinkButton icon={<LinkIcon />} />\n            <AutolinkIDsButton />\n            <ScientificSymbolsButton />\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default InlineToolbar\n","import { makeStyles } from \"@material-ui/core/styles\"\n\ntype StyleProps = {\n  align: string | unknown\n  selected: boolean\n  focused: boolean\n}\n\nconst useStyles = makeStyles(() => ({\n  container: (props: StyleProps) => ({\n    textAlign: props.align,\n    display: \"block\",\n  }),\n  media: (props: StyleProps) => ({\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n    boxShadow: props.selected && props.focused ? \"0 0 0 3px #B4D5FF\" : \"none\",\n  }),\n}))\n\nexport default useStyles\n","import React from \"react\"\nimport { useSelected, useFocused } from \"slate-react\"\nimport useStyles from \"../styles/media\"\nimport { Props } from \"../types/element\"\n\n/**\n * Image handles the display of any images.\n */\nconst Image = ({ attributes, element, children }: Props) => {\n  const { align, url, description, width, height, linkURL } = element\n  const selected = useSelected()\n  const focused = useFocused()\n  const styleProps = {\n    align,\n    selected,\n    focused,\n  }\n  const classes = useStyles(styleProps)\n\n  const img = (\n    <img\n      src={url}\n      alt={description}\n      height={height || \"100%\"}\n      width={width || \"100%\"}\n      className={classes.media}\n    />\n  )\n\n  return (\n    <div className={classes.container} {...attributes}>\n      <div contentEditable={false}>\n        {linkURL !== \"\" ? <a href={linkURL}>{img}</a> : { img }}\n      </div>\n      {children}\n    </div>\n  )\n}\n\nexport default Image\n","import React from \"react\"\nimport { useSelected, useFocused } from \"slate-react\"\nimport useStyles from \"../styles/media\"\nimport { Props } from \"../types/element\"\n\n/**\n * Video handles the display of any videos.\n */\nconst Video = ({ attributes, element, children }: Props) => {\n  const { align, url, width, height } = element\n  const selected = useSelected()\n  const focused = useFocused()\n  const styleProps = {\n    align,\n    selected,\n    focused,\n  }\n  const classes = useStyles(styleProps)\n\n  return (\n    <div className={classes.container} {...attributes}>\n      <div contentEditable={false}>\n        <iframe\n          title=\"video-embed\"\n          id=\"videoplayer\"\n          width={width}\n          height={height}\n          src={url}\n          frameBorder=\"0\"\n          className={classes.media}\n          allowFullScreen\n        />\n      </div>\n      {children}\n    </div>\n  )\n}\n\nexport default Video\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Divider from \"@material-ui/core/Divider\"\nimport Table from \"@material-ui/core/Table\"\nimport TableBody from \"@material-ui/core/TableBody\"\nimport TableRow from \"@material-ui/core/TableRow\"\nimport TableCell from \"@material-ui/core/TableCell\"\nimport Link from \"@material-ui/core/Link\"\nimport Image from \"./Image\"\nimport Video from \"./Video\"\nimport { Props } from \"../types/element\"\nimport { types } from \"../constants/types\"\n\ntype StyleProps = {\n  lineSpacing: string | unknown\n  borderColor: string | unknown\n}\n\nconst useStyles = makeStyles(() => ({\n  lineSpacing: (props: StyleProps) => ({\n    lineHeight: props.lineSpacing,\n  }),\n  table: (props: StyleProps) => ({\n    border: `1px solid ${props.borderColor}`,\n    borderCollapse: \"collapse\",\n  }),\n  link: {\n    cursor: \"pointer\",\n  },\n}))\n\n/**\n * Element is used to render blocks based on a given type.\n */\nconst Element = ({ attributes, children, element }: Props) => {\n  const { type, align = \"inherit\", lineSpacing, borderColor, url } = element\n  const styleProps = {\n    lineSpacing: lineSpacing ? lineSpacing : \"normal\",\n    borderColor: borderColor ? borderColor : \"grey\",\n  }\n  const classes = useStyles(styleProps)\n\n  switch (type) {\n    case types.h1:\n      return (\n        <Typography variant=\"h1\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.h2:\n      return (\n        <Typography variant=\"h2\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.h3:\n      return (\n        <Typography variant=\"h3\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.link:\n      return (\n        <Link\n          href={url}\n          color=\"primary\"\n          className={classes.link}\n          {...attributes}>\n          {children}\n        </Link>\n      )\n    case types.divider:\n      return <Divider {...attributes} />\n    case types.lineSpacing:\n      return (\n        <Typography\n          component=\"div\"\n          className={classes.lineSpacing}\n          {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.image:\n      return (\n        <Image element={element} attributes={attributes}>\n          {children}\n        </Image>\n      )\n    case types.video:\n      return (\n        <Video element={element} attributes={attributes}>\n          {children}\n        </Video>\n      )\n    case types.unorderedList:\n      return <ul {...attributes}>{children}</ul>\n    case types.orderedList:\n      return <ol {...attributes}>{children}</ol>\n    case types.listItem:\n      return <li {...attributes}>{children}</li>\n    case types.table:\n      return (\n        <Table className={classes.table}>\n          <TableBody {...attributes}>{children}</TableBody>\n        </Table>\n      )\n    case types.tableRow:\n      return <TableRow {...attributes}>{children}</TableRow>\n    case types.tableCell:\n      return (\n        <TableCell className={classes.table} {...attributes}>\n          {children}\n        </TableCell>\n      )\n    case types.tableWrap:\n      return (\n        <Typography component=\"div\" {...attributes}>\n          {children}\n        </Typography>\n      )\n    default:\n      return (\n        <Typography component=\"div\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n  }\n}\n\nexport default Element\n","import { Editor, Element } from \"slate\"\nimport getParentNode from \"./getParentNode\"\nimport { types } from \"../constants/types\"\n\n/**\n * getFontSize is a helper function so any text nodes inside a header\n * element node can inherit the header font size\n */\nconst getFontSize = (editor: Editor, fontSize: string) => {\n  const node = getParentNode(editor)\n  // if the parent node is a header then its text children should inherit its size\n  if (Element.isElement(node) && node.type === types.h1) {\n    return \"inherit\"\n  }\n  if (Element.isElement(node) && node.type === types.h2) {\n    return \"inherit\"\n  }\n  if (Element.isElement(node) && node.type === types.h3) {\n    return \"inherit\"\n  }\n  return fontSize\n}\n\nexport default getFontSize\n","import React from \"react\"\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { useSlate, RenderLeafProps } from \"slate-react\"\nimport getFontSize from \"../utils/getFontSize\"\nimport \"../utils/fonts\"\n\ntype StyleProps = {\n  fontFamily: string | unknown\n  fontSize: string | unknown\n  fontColor: string | unknown\n}\n\nconst useStyles = makeStyles(() => ({\n  text: (props: StyleProps) => ({\n    fontFamily: props.fontFamily,\n    fontSize: props.fontSize,\n    color: props.fontColor,\n    lineHeight: \"inherit\",\n  }),\n}))\n\n/**\n * Leaf is used to render text based on a given style.\n *\n * We need to use standard if conditionals and not if/else if because\n * a leaf can have multiple matching properties. If a leaf is both bold\n * and italic, for example, then ultimately this component would render:\n *\n * <span {...attributes}><strong><em>{children}</em></strong></span>\n */\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  const editor = useSlate()\n  const theme = useTheme()\n  const props = {\n    fontFamily: leaf.fontFamily ? leaf.fontFamily : theme.typography.fontFamily,\n    fontSize: getFontSize(editor, leaf.fontSize as string),\n    fontColor: leaf.fontColor ? leaf.fontColor : theme.palette.text.primary,\n  }\n  const classes = useStyles(props)\n\n  if (leaf.bold) {\n    children = <strong data-testid=\"bold\">{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em data-testid=\"italic\">{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u data-testid=\"underline\">{children}</u>\n  }\n\n  if (leaf.strikethrough) {\n    children = <s data-testid=\"strikethrough\">{children}</s>\n  }\n\n  if (leaf.subscript) {\n    children = <sub data-testid=\"subscript\">{children}</sub>\n  }\n\n  if (leaf.superscript) {\n    children = <sup data-testid=\"superscript\">{children}</sup>\n  }\n\n  return (\n    <Typography component=\"span\" className={classes.text} {...attributes}>\n      {children}\n    </Typography>\n  )\n}\n\nexport default Leaf\n","import { jsx } from \"slate-hyperscript\"\nimport { types } from \"../constants/types\"\nimport { DeserializeElement, DeserializeLeafValue } from \"../types/deserialize\"\n\nconst elementTags = {\n  A: (el: HTMLElement) => ({ type: types.link, url: el.getAttribute(\"href\") }),\n  H1: () => ({ type: types.h1 }),\n  H2: () => ({ type: types.h2 }),\n  H3: () => ({ type: types.h3 }),\n  IMG: (el: HTMLElement) => ({\n    type: types.image,\n    url: el.getAttribute(\"src\"),\n  }),\n  LI: () => ({ type: types.listItem }),\n  OL: () => ({ type: types.orderedList }),\n  UL: () => ({ type: types.unorderedList }),\n  P: () => ({ type: types.paragraph }),\n  HR: () => ({ type: types.divider }),\n  BR: () => ({ type: types.paragraph }),\n} as DeserializeElement\n\nconst leafTags = {\n  DEL: () => ({ strikethrough: true }),\n  EM: () => ({ italic: true }),\n  I: () => ({ italic: true }),\n  S: () => ({ strikethrough: true }),\n  STRONG: () => ({ bold: true }),\n  B: () => ({ bold: true }),\n  U: () => ({ underline: true }),\n  SUB: () => ({ subscript: true }),\n  SUP: () => ({ superscript: true }),\n} as DeserializeLeafValue\n\nconst deserialize = (el: any) => {\n  // text\n  if (el.nodeType === 3) {\n    return el.textContent\n  }\n  // not a tag\n  if (el.nodeType !== 1) {\n    return null\n  }\n\n  const { nodeName } = el\n  let parent = el\n\n  const children: any[] = Array.from(parent.childNodes).map(deserialize).flat()\n\n  // body\n  if (el.nodeName === \"BODY\") {\n    return jsx(\"fragment\", {}, children)\n  }\n\n  if (elementTags[nodeName]) {\n    const attrs = elementTags[nodeName](el)\n    return jsx(\"element\", attrs, children)\n  }\n\n  if (leafTags[nodeName]) {\n    const attrs = leafTags[nodeName](el)\n    return children\n      .filter((child) => typeof child === \"string\")\n      .map((child) => jsx(\"text\", attrs, child))\n  }\n\n  return children\n}\n\nexport default deserialize\n","import { types } from \"../constants/types\"\n\n// the two font arrays are taken from the old page editor and used to convert old data\nconst FontFamilyList = [\n  { name: \"Lato\" },\n  { name: \"Merriweather\" },\n  { name: \"Montserrat\" },\n  { name: \"Roboto\" },\n  { name: \"Roboto Condensed\" },\n  { name: \"Roboto Mono\" },\n  { name: \"Roboto Slab\" },\n]\n\nconst FontSizeList = [\n  { size: \"12px\" },\n  { size: \"14px\" },\n  { size: \"16px\" },\n  { size: \"18px\" },\n  { size: \"20px\" },\n  { size: \"22px\" },\n  { size: \"26px\" },\n  { size: \"30px\" },\n]\n\n/**\n * convertData receives a node object and converts its nested\n * 'data' object into the new Slate format.\n */\nconst convertData = (node) => {\n  const { type } = node\n  switch (type) {\n    case \"alignment\":\n      return {\n        align: node.data[\"align\"],\n      }\n    case \"image\":\n      return {\n        url: node.data[\"src\"],\n        description: node.data[\"description\"],\n        height: node.data[\"height\"],\n        width: node.data[\"width\"],\n      }\n    case \"line-spacing\":\n      return {\n        lineSpacing: node.data[\"size\"],\n      }\n    case \"link\":\n      return {\n        url: node.data[\"href\"],\n      }\n    case \"video\":\n      return {\n        url: node.data[\"src\"],\n        height: node.data[\"height\"],\n        width: node.data[\"width\"],\n      }\n    default:\n      return {}\n  }\n}\n\n/**\n * convertType converts an existing 'type' property into the 'type'\n * used by the new version of the editor.\n */\nconst convertType = (type) => {\n  let convertedType = \"\"\n  switch (type) {\n    case \"heading_one\":\n    case \"heading-one\":\n    case \"heading_1\":\n      convertedType = types.h1\n      break\n    case \"heading_two\":\n    case \"heading-two\":\n    case \"heading_2\":\n      convertedType = types.h2\n      break\n    case \"heading_three\":\n    case \"heading-three\":\n    case \"heading_3\":\n      convertedType = types.h3\n      break\n    // h4-h6 not used in new editor\n    case \"heading_four\":\n    case \"heading-four\":\n    case \"heading_4\":\n      convertedType = types.h3\n      break\n    case \"heading_five\":\n    case \"heading-five\":\n    case \"heading_5\":\n      convertedType = types.h3\n      break\n    case \"heading_six\":\n    case \"heading-six\":\n    case \"heading_6\":\n      convertedType = types.h3\n      break\n    case \"line-spacing\":\n      convertedType = types.lineSpacing\n      break\n    case \"ordered-list\":\n    case \"ordered_list\":\n    case \"ol_list\":\n      convertedType = types.orderedList\n      break\n    case \"unordered-list\":\n    case \"unordered_list\":\n    case \"ul_list\":\n      convertedType = types.unorderedList\n      break\n    case \"list-item\":\n    case \"list_item\":\n    case \"list-item-child\":\n      convertedType = types.listItem\n      break\n    case \"table\":\n      convertedType = types.tableWrap\n      break\n    case \"table-row\":\n      convertedType = types.tableRow\n      break\n    case \"table-cell\":\n      convertedType = types.tableCell\n      break\n    case \"align_center\":\n    case \"align_left\":\n    case \"align_right\":\n    case \"align_center\":\n      convertedType = \"div\"\n      break\n    default:\n      convertedType = type\n  }\n  return convertedType\n}\n\nconst convertChildren = (node, align) => {\n  // if there are nodes then convert the children\n  if (node.nodes) {\n    return node.nodes.reduce((acc, val) => {\n      const nodes = convertNode(val)\n      // if the converted current value is an array, only grab the object inside of it\n      if (Array.isArray(nodes)) {\n        return [...acc, ...nodes]\n      }\n      // otherwise add the new value in its existing object form\n      return [...acc, nodes]\n    }, [])\n  }\n  // otherwise include mandatory object with text property\n  return [{ text: \"\" }]\n}\n\nconst alignmentTypes = [\n  \"alignment\",\n  \"align_left\",\n  \"align_center\",\n  \"align_right\",\n  \"align_justify\",\n]\n\nconst marksReducer = (acc, mark) => {\n  if (mark.type === \"font-color\") {\n    return {\n      ...acc,\n      fontColor: mark.data.color,\n    }\n  }\n  if (mark.type === \"font-family\") {\n    return {\n      ...acc,\n      fontFamily: FontFamilyList[mark.data.fontFamilyIndex].name,\n    }\n  }\n  if (mark.type === \"font-size\") {\n    return {\n      ...acc,\n      fontSize: FontSizeList[mark.data.fontSizeIndex].size,\n    }\n  }\n\n  return {\n    ...acc,\n    [mark.type]: true,\n  }\n}\n\nconst convertDataByType = (node) => {\n  const { type } = node\n  // remove any alignment wrappers from old structure;\n  // previously, changing the alignment would add a new <div> around the selection\n  if (alignmentTypes.includes(type)) {\n    const element = {\n      type: \"div\",\n      children: convertChildren(node),\n      ...convertData(node),\n    }\n    return element\n  }\n\n  return {\n    type: convertType(type),\n    children: convertChildren(node),\n    ...convertData(node),\n  }\n}\n\nconst convertNode = (node) => {\n  const { type } = node\n  if (type) {\n    return convertDataByType(node)\n  }\n\n  const { text, marks, leaves } = node\n\n  /**\n   * Leaves is an array containing leaf objects of this structure:\n   * {\n   *  object: \"leaf\",\n   *  text: \"george costanza\",\n   *  marks: [\n   *    {\n   *      object: \"mark\",\n   *      type: \"italic\",\n   *      data: {}\n   *    }\n   *  ]\n   * }\n   *\n   * Each leaf node needs to be converted recursively.\n   */\n  if (leaves) {\n    return [...leaves.map(convertNode)]\n  }\n\n  /**\n    Example node to check for:\n      {\n        object: \"leaf\",\n        text: \"periodically\",\n        marks: [\n          {\n            object: \"mark\",\n            type: \"italic\",\n            data: {},\n          },\n        ],\n      }\n    \n  */\n  if (marks && marks.length > 0) {\n    // return object with text and list of marks with appropriate values\n    return {\n      text,\n      ...marks.reduce(marksReducer, {}),\n    }\n  }\n\n  // if no leaves or marks then just return plain text\n  return {\n    text,\n  }\n}\n\nconst convertSlate047 = (object) => {\n  const { nodes } = object.document\n\n  return nodes.map(convertNode)\n}\n\nexport default convertSlate047\n","import { createMuiTheme } from \"@material-ui/core/styles\"\n\nconst defaultTheme = createMuiTheme({})\n\nexport default defaultTheme\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport { createEditor, Descendant } from \"slate\"\nimport { Slate, Editable, withReact } from \"slate-react\"\nimport { withHistory } from \"slate-history\"\nimport { Theme, ThemeProvider } from \"@material-ui/core/styles\"\nimport Toolbar from \"./Toolbar\"\nimport InlineToolbar from \"./InlineToolbar\"\nimport Element from \"./Element\"\nimport Leaf from \"./Leaf\"\nimport withHTML from \"../plugins/withHTML\"\nimport withLinks from \"../plugins/withLinks\"\nimport withLists from \"../plugins/withLists\"\nimport withMedia from \"../plugins/withMedia\"\nimport withNormalize from \"../plugins/withNormalize\"\nimport onKeyDown from \"../utils/onKeyDown\"\nimport convertSlate047 from \"../utils/migration\"\nimport defaultTheme from \"../styles/theme\"\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [\n      {\n        fontFamily: \"Roboto\",\n        fontSize: \"inherit\",\n        fontColor: \"rgba(0, 0, 0, 0.87)\",\n        text: \"\",\n      },\n    ],\n  },\n]\n\ntype Props = {\n  /** Page content taken from JSON */\n  pageContent?: string\n  /** Whether the editor is in read-only mode or not */\n  readOnly: boolean\n  /** Material-UI theme */\n  theme?: Theme\n  /** Indicates if condensed (inline) toolbar should be shown */\n  inline?: boolean\n}\n\n/**\n * PageEditor is the main editor component.\n */\nconst PageEditor = ({\n  pageContent,\n  readOnly,\n  theme = defaultTheme,\n  inline,\n}: Props) => {\n  // create a slate editor object that won't change across renders\n  const editor = useMemo(\n    () =>\n      withHTML(\n        withHistory(\n          withReact(\n            withNormalize(withMedia(withLists(withLinks(createEditor())))),\n          ),\n        ),\n      ),\n    [],\n  )\n  let defaultValue = initialValue\n  if (pageContent) {\n    defaultValue = JSON.parse(pageContent)\n    if (!Array.isArray(defaultValue)) {\n      defaultValue = convertSlate047(defaultValue)\n    }\n  }\n\n  // store the value of the editor\n  const [value, setValue] = useState<Descendant[]>(defaultValue)\n  // render expected element based on type passed as props\n  // memoize this function for subsequent renders\n  const renderElement = useCallback((props) => <Element {...props} />, [])\n  // render expected leaf based on type (i.e. bold, italic, etc)\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, [])\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    onKeyDown(event, editor)\n  }\n\n  let toolbar = inline ? <InlineToolbar /> : <Toolbar />\n  console.log(value)\n  return (\n    <ThemeProvider theme={theme}>\n      <Slate\n        editor={editor}\n        value={value}\n        onChange={(value) => setValue(value)}>\n        {!readOnly && toolbar}\n        <Editable\n          readOnly={readOnly}\n          renderElement={renderElement}\n          renderLeaf={renderLeaf}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Enter some text...\"\n          spellCheck\n          autoFocus\n        />\n      </Slate>\n    </ThemeProvider>\n  )\n}\n\nexport default PageEditor\n","import { Editor, Transforms } from \"slate\"\nimport deserialize from \"../utils/deserialize\"\n\n/**\n * withHTML parses HTML content and converts to Slate JSON\n */\nconst withHTML = (editor: Editor) => {\n  const { insertData } = editor\n\n  editor.insertData = (data) => {\n    const html = data.getData(\"text/html\")\n\n    if (html) {\n      const parsed = new DOMParser().parseFromString(html, \"text/html\")\n      const fragment = deserialize(parsed.body)\n      Transforms.insertFragment(editor, fragment)\n      return\n    }\n\n    insertData(data)\n  }\n\n  return editor\n}\n\nexport default withHTML\n","import { Editor, Element, Transforms } from \"slate\"\nimport { types } from \"../constants/types\"\n\nconst withNormalize = (editor: Editor) => {\n  const { normalizeNode } = editor\n\n  editor.normalizeNode = (element) => {\n    const [node, path] = element\n    // make sure a paragraph follows every divider so cursor can always be\n    // placed after a divider\n    const divider = Element.isElement(node) && node.type === types.divider\n    const image = Element.isElement(node) && node.type === types.image\n    const video = Element.isElement(node) && node.type === types.video\n    if (divider || image || video) {\n      Transforms.insertNodes(editor, {\n        type: types.paragraph,\n        children: [{ text: \"\" }],\n      })\n    }\n\n    return normalizeNode([node, path])\n  }\n\n  return editor\n}\n\nexport default withNormalize\n","import { Editor } from \"slate\"\nimport { types } from \"../constants/types\"\n\nconst withMedia = (editor: Editor) => {\n  const { isVoid } = editor\n\n  // make sure every image type is void\n  editor.isVoid = (element) => {\n    if (element.type === types.image || element.type === types.video) {\n      return true\n    }\n    return isVoid(element)\n  }\n\n  return editor\n}\n\nexport default withMedia\n","import { Editor } from \"slate\"\nimport { types } from \"../constants/types\"\n\nconst withLinks = (editor: Editor) => {\n  const { isInline } = editor\n\n  // make sure every link type is rendered as inline\n  // NOTE: if a node is inline then it automatically adds children with { text: \"\" }\n  // https://docs.slatejs.org/concepts/02-nodes\n  editor.isInline = (element) => {\n    if (element.type === types.link) {\n      return true\n    }\n    return isInline(element)\n  }\n\n  return editor\n}\n\nexport default withLinks\n","import { Editor } from \"slate\"\nimport { indentItem, undentItem } from \"../plugins/withLists\"\n\nconst onKeyDown = (event: React.KeyboardEvent, editor: Editor) => {\n  if (event.key === \"Tab\") {\n    event.preventDefault()\n    if (event.shiftKey) {\n      undentItem(editor)\n    } else {\n      indentItem(editor)\n    }\n  }\n}\n\nexport default onKeyDown\n"],"names":["useStyles","makeStyles","button","props","color","active","isMarkActive","editor","format","marks","Editor","MarkButton","icon","useSlate","classes","React","Tooltip","title","IconButton","className","size","onMouseDown","event","preventDefault","removeMark","addMark","toggleMark","isBlockActive","property","value","Array","from","nodes","match","n","isEditor","SlateElement","isElement","toggleBlock","isActive","Transforms","setNodes","type","BlockButton","clickFn","AlignButton","align","toggleAlign","textTransform","LinkDialog","handleAddClick","handleClose","dialogOpen","link","setLink","Dialog","open","onClose","DialogTitle","id","DialogContent","TextField","autoFocus","margin","label","defaultValue","url","onChange","e","target","text","fullWidth","DialogActions","Button","onClick","variant","linkNodeOptions","isLinkActive","upsertLink","unwrapNodes","linkData","children","selection","Range","isCollapsed","insertNodes","wrapNodes","split","insertText","collapse","edge","getLinkSelection","prevURL","selectedText","string","linkNode","deselect","LinkButton","useState","linkDialogOpen","setLinkDialogOpen","handleAddLink","useLinks","Fragment","useAnchorElement","setAnchorEl","anchorEl","handleMouseDown","currentTarget","_","reason","idList","AutolinkIDsButton","Menu","Boolean","MenuListProps","disablePadding","map","item","index","MenuItem","key","prefix","getURLPrefix","valid","test","validateText","alert","includes","handleItemClick","theme","buttonContainer","display","flexDirection","width","height","padding","spacing","cursor","input","marginTop","marginBottom","borderRadius","popper","ColorPicker","handleChange","activeColor","useTheme","presetColors","palette","primary","main","secondary","error","warning","info","success","getPresetColors","HexColorPicker","HexColorInput","style","backgroundColor","getCurrentMark","mark","FontColorButton","keepMounted","CheckIcon","SvgIcon","d","fill","FontFamilyList","FontSizeList","LineSpacingList","getParentNode","parentPath","Path","parent","anchor","path","Node","get","menuItem","justifyContent","LineSpacingButton","parentNode","currentLineSpacing","Element","lineSpacing","ImageDialog","image","setImage","checked","setChecked","description","Number","FormControlLabel","control","Checkbox","name","linkURL","ImageButton","imageDialogOpen","setImageDialogOpen","insertImage","VideoDialog","video","setVideo","youTubeRegex","vimeoRegex","VideoButton","videoDialogOpen","setVideoDialogOpen","transformedURL","videoID","length","getVideoID","addVideo","ScientificSymbolIcon","grey","border","ScientificSymbolsButton","symbols","i","push","String","fromCharCode","getSymbolsList","Popper","undefined","BoldIcon","ItalicIcon","StrikethroughIcon","SubscriptIcon","SuperscriptIcon","UnderlinedIcon","H1Icon","H2Icon","H3Icon","LinkIcon","DividerIcon","fillRule","x","y","LineSpacingIcon","ImageIcon","VideoIcon","UnorderedListIcon","OrderedListIcon","IndentIncreaseIcon","IndentDecreaseIcon","AlignLeftIcon","AlignCenterIcon","AlignRightIcon","AlignJustifyIcon","dropdown","marginLeft","marginRight","minWidth","Dropdown","values","FormControl","Select","val","FontColorIcon","toggleList","parentListMatch","listItemMatch","findMatchingList","findMatchingListItem","setParagraphNode","liftNodes","handleLists","callback","start","Point","equals","indentItem","listMatch","mode","undentItem","TableIcon","TableInsertColumnIcon","TableInsertRowIcon","TableDeleteColumnIcon","TableDeleteRowIcon","DeleteIcon","getNodeAbove","above","getEmptyTableRow","count","deleteTable","tableMatch","removeNodes","at","TableButtons","row","col","insertTable","currentCell","currentTable","tableNode","tablePath","newCellPath","next","slice","replacePathPos","currentRowIndex","forEach","select","insertTableColumn","currentRow","rowPath","insertTableRow","cellPath","pathToDelete","deleteTableColumn","deleteTableRow","tableButtons","separator","borderLeftColor","borderLeftStyle","borderLeftWidth","verticalAlign","Separator","container","toolbar","position","top","divider","EditorToolbar","AppBar","Toolbar","disableGutters","Grid","xs","listButtons","InlineToolbar","textAlign","media","maxWidth","maxHeight","boxShadow","selected","focused","Image","attributes","element","useSelected","useFocused","img","src","alt","contentEditable","href","Video","frameBorder","allowFullScreen","lineHeight","table","borderColor","borderCollapse","Typography","Link","Divider","component","Table","TableBody","TableRow","TableCell","getFontSize","fontSize","node","fontFamily","fontColor","Leaf","leaf","typography","bold","italic","underline","strikethrough","subscript","superscript","elementTags","A","el","getAttribute","H1","H2","H3","IMG","LI","OL","UL","P","HR","BR","leafTags","DEL","EM","I","S","STRONG","B","U","SUB","SUP","convertData","data","convertType","convertedType","convertChildren","reduce","acc","convertNode","isArray","alignmentTypes","marksReducer","fontFamilyIndex","fontSizeIndex","convertDataByType","leaves","defaultTheme","createMuiTheme","initialValue","pageContent","readOnly","inline","useMemo","insertData","html","getData","fragment","deserialize","nodeType","textContent","nodeName","childNodes","flat","jsx","attrs","filter","child","DOMParser","parseFromString","body","insertFragment","withHTML","withHistory","withReact","normalizeNode","withNormalize","isVoid","withMedia","insertBreak","deleteBackward","args","withLists","isInline","withLinks","createEditor","JSON","parse","document","setValue","renderElement","useCallback","renderLeaf","console","log","ThemeProvider","Slate","Editable","onKeyDown","shiftKey","placeholder","spellCheck"],"mappings":"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"}
{"version":3,"file":"dicty-components-page-editor.cjs.production.min.js","sources":["../src/components/buttons/BoldButton.tsx","../src/Toolbar.tsx","../src/components/Element.tsx","../src/components/Leaf.tsx","../src/PageEditor.tsx"],"sourcesContent":["import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport FormatBoldIcon from \"@material-ui/icons/FormatBold\"\n\n// make this a MarkButton component with more generic functions\n\nconst isBoldMarkActive = (editor: ReactEditor) => {\n  // gets a list of marks on the text on the given selection\n  const marks = Editor.marks(editor)\n\n  // if there are bold marks then the bold mark is active\n  return marks ? marks[\"bold\"] === true : false\n}\n\nconst toggleBoldMark = (editor: ReactEditor) => {\n  // first find if the selection's mark is currently active\n  const isActive = isBoldMarkActive(editor)\n\n  if (isActive) {\n    Editor.removeMark(editor, \"bold\")\n  } else {\n    Editor.addMark(editor, \"bold\", true)\n  }\n  console.log(Editor.marks(editor))\n}\n\nconst BoldButton = () => {\n  const editor = useSlate()\n\n  // when bold button is clicked, toggle the mark\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleBoldMark(editor)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      <FormatBoldIcon />\n    </IconButton>\n  )\n}\n\nexport default BoldButton\n","import React from \"react\"\nimport BoldButton from \"./components/buttons/BoldButton\"\n\nconst Toolbar = () => {\n  return (\n    <div>\n      <BoldButton />\n    </div>\n  )\n}\n\nexport default Toolbar\n","import React from \"react\"\nimport { RenderElementProps } from \"slate-react\"\n// import Typography from \"@material-ui/core/Typography\"\n\nconst Element = ({ attributes, children, element }: RenderElementProps) => {\n  switch (element.type) {\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nexport default Element\n","import React from \"react\"\nimport { RenderLeafProps } from \"slate-react\"\n// import Typography from \"@material-ui/core/Typography\"\n\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nexport default Leaf\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport { createEditor, Node } from \"slate\"\nimport { Slate, Editable, withReact } from \"slate-react\"\nimport Toolbar from \"./Toolbar\"\nimport Element from \"./components/Element\"\nimport Leaf from \"./components/Leaf\"\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [{ text: \"A line of text in a paragraph.\" }],\n  },\n]\n\nconst PageEditor = () => {\n  // create a slate editor object that won't change across renders\n  const editor = useMemo(() => withReact(createEditor()), [])\n  // store the value of the editor\n  const [value, setValue] = useState<Node[]>(initialValue)\n  // render expected element based on type passed as props\n  // memoize this function for subsequent renders\n  const renderElement = useCallback((props) => <Element {...props} />, [])\n  // render expected leaf based on type (i.e. bold, italic, etc)\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={(value) => setValue(value)}>\n      <Toolbar />\n      <Editable renderElement={renderElement} renderLeaf={renderLeaf} />\n    </Slate>\n  )\n}\n\nexport default PageEditor\n"],"names":["BoldButton","editor","useSlate","React","IconButton","size","onClick","event","preventDefault","marks","Editor","isBoldMarkActive","addMark","removeMark","console","log","toggleBoldMark","FormatBoldIcon","Toolbar","Element","children","attributes","Leaf","leaf","bold","italic","underline","initialValue","type","text","useMemo","withReact","createEditor","useState","value","setValue","renderElement","useCallback","props","renderLeaf","Slate","onChange","Editable"],"mappings":"+SA4BMA,EAAa,eACXC,EAASC,oBASbC,gBAACC,GAAWC,KAAK,QAAQC,QANP,SAACC,GACnBA,EAAMC,iBAjBa,SAACP,IARC,SAACA,OAElBQ,EAAQC,SAAOD,MAAMR,WAGpBQ,IAA0B,IAAlBA,EAAK,KAKHE,CAAiBV,GAKhCS,SAAOE,QAAQX,EAAQ,QAAQ,GAF/BS,SAAOG,WAAWZ,EAAQ,QAI5Ba,QAAQC,IAAIL,SAAOD,MAAMR,IASvBe,CAAef,KAKbE,gBAACc,UCpCDC,EAAU,kBAEZf,2BACEA,gBAACH,UCFDmB,EAAU,gBAAeC,IAAAA,gBAGlBjB,uCAHMkB,YAGcD,ICH3BE,EAAO,gBAAGD,IAAAA,WAAYD,IAAAA,SAAUG,IAAAA,YAChCA,EAAKC,OACPJ,EAAWjB,8BAASiB,IAGlBG,EAAKE,SACPL,EAAWjB,0BAAKiB,IAGdG,EAAKG,YACPN,EAAWjB,yBAAIiB,IAGVjB,wCAAUkB,GAAaD,ICV1BO,EAAe,CACnB,CACEC,KAAM,YACNR,SAAU,CAAC,CAAES,KAAM,wDAIJ,eAEX5B,EAAS6B,WAAQ,kBAAMC,YAAUC,oBAAiB,MAE9BC,WAAiBN,GAApCO,OAAOC,OAGRC,EAAgBC,eAAY,SAACC,UAAUnC,gBAACgB,mBAAYmB,MAAW,IAE/DC,EAAaF,eAAY,SAACC,UAAUnC,gBAACmB,mBAASgB,MAAW,WAG7DnC,gBAACqC,SAAMvC,OAAQA,EAAQiC,MAAOA,EAAOO,SAAU,SAACP,UAAUC,EAASD,KACjE/B,gBAACe,QACDf,gBAACuC,YAASN,cAAeA,EAAeG,WAAYA"}
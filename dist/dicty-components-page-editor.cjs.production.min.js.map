{"version":3,"file":"dicty-components-page-editor.cjs.production.min.js","sources":["../src/components/buttons/MarkButton.tsx","../src/components/buttons/BlockButton.tsx","../src/components/buttons/AlignButton.tsx","../src/components/buttons/LinkButton.tsx","../src/constants/types.ts","../src/components/icons/BoldIcon.tsx","../src/components/icons/ItalicIcon.tsx","../src/components/icons/StrikethroughIcon.tsx","../src/components/icons/SubscriptIcon.tsx","../src/components/icons/SuperscriptIcon.tsx","../src/components/icons/UnderlinedIcon.tsx","../src/components/icons/H1Icon.tsx","../src/components/icons/H2Icon.tsx","../src/components/icons/H3Icon.tsx","../src/components/icons/LinkIcon.tsx","../src/components/icons/AlignLeftIcon.tsx","../src/components/icons/AlignCenterIcon.tsx","../src/components/icons/AlignRightIcon.tsx","../src/components/icons/AlignJustifyIcon.tsx","../src/components/Toolbar.tsx","../src/components/Element.tsx","../src/components/Leaf.tsx","../src/components/PageEditor.tsx","../src/components/plugins/withLinks.ts"],"sourcesContent":["import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\n\n/**\n * isMarkActive determines if the current text selection contains an\n * active mark\n */\nconst isMarkActive = (editor: ReactEditor, format: string) => {\n  // get a list of marks from the selected text\n  const marks = Editor.marks(editor)\n\n  // if there are marks for specified format then the mark is active\n  if (marks && marks[format]) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/**\n * toggleMark will either remove or add a mark to the given text selection\n */\nconst toggleMark = (editor: ReactEditor, format: string) => {\n  // first find if the selection's mark is currently active\n  const isActive = isMarkActive(editor, format)\n\n  // we either want to add or remove a mark based on whether it is currently active\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\ntype Props = {\n  /** Type of mark (i.e. \"bold\") */\n  format: string\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * MarkButton displays a button with associated click logic for toggling a mark.\n */\nconst MarkButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the mark within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleMark(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default MarkButton\n","import React, { MouseEvent } from \"react\"\nimport { Editor, Transforms, Element as SlateElement } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\n\n/**\n * PROCESS:\n *\n * 1. User clicks button\n * 2. We run generator function to find any matching nodes for that block type.\n * 3. If there are no matches (value == undefined) then the generator is done\n *    and we do not mark that block as active.\n * 4. If the block is not active, then we set the nodes to match that format type.\n * 5. If the generator does find a match, we mark that block as active for the\n *    first matching node.\n * 6. If the block is active, then we set the nodes back to the default type of\n *    'paragraph'.\n */\n\n/**\n * isBlockActive determines if the current text selection contains an active block\n */\nconst isBlockActive = (editor: ReactEditor, format: string) => {\n  // Editor.nodes returns a generator that iterates through all of the editor's\n  // nodes. We are looking for matches for the selected format.\n  // https://github.com/ianstormtaylor/slate/blob/master/packages/slate/src/interfaces/node.ts#L467\n  const nodeGenerator = Editor.nodes(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\n  })\n  // run the generator to find the nearest match\n  const node = nodeGenerator.next()\n  // if it finds a match then return true to indicate the block is currently\n  // active\n  while (!node.done) {\n    return true\n  }\n  // if it doesn't find a match, then the generator has yielded its last value\n  // meaning that it did not find a match for this block type\n  return false\n}\n\n/**\n * toggleBlock will set the appropriate nodes for the given selection\n */\nconst toggleBlock = (editor: ReactEditor, format: string) => {\n  // first find if the selected block is currently active\n  const isActive = isBlockActive(editor, format)\n\n  // setNodes is used to set properties at the currently selected element.\n  // If the block is active, then we want to toggle it back to the default\n  // paragraph type. If the block is not active, we toggle the type to match it.\n  Transforms.setNodes(editor, {\n    type: isActive ? \"paragraph\" : format,\n  })\n}\n\ntype Props = {\n  /** Type of block (i.e. \"h1\") */\n  format: string\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * BlockButton displays a button with associated click logic for toggling a\n * block.\n */\nconst BlockButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the block within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleBlock(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default BlockButton\n","import React, { MouseEvent } from \"react\"\nimport { Editor, Transforms, Element as SlateElement } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\n\nconst isAlignActive = (editor: ReactEditor, align: string) => {\n  const nodeGenerator = Editor.nodes(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.align === align,\n  })\n\n  // run the generator to find the nearest match\n  // then return true if this is the last value\n  const node = nodeGenerator.next()\n  while (!node.done) {\n    return true\n  }\n  return false\n}\n\nconst toggleAlign = (editor: ReactEditor, align: string) => {\n  const isActive = isAlignActive(editor, align)\n\n  Transforms.setNodes(editor, {\n    align: isActive ? \"left\" : align,\n  })\n}\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n  /** Text alignment property */\n  align: string\n}\n\n/**\n * AlignButton displays a button with associated logic for adding the \"align\"\n * attribute.\n */\nconst AlignButton = ({ icon, align }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the block within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleAlign(editor, align)\n  }\n\n  return (\n    <IconButton\n      size=\"small\"\n      aria-label={`align-${align}`}\n      onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default AlignButton\n","import React, { MouseEvent } from \"react\"\nimport { Editor, Transforms, Range, Node, Element as SlateElement } from \"slate\"\nimport { useSlate } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { types } from \"../../constants/types\"\n\n// this config looks for a match of the link type\nconst nodeOptions = {\n  match: (n: Node) =>\n    !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === types.link,\n}\n\nconst isLinkActive = (editor: Editor) => {\n  const nodeGenerator = Editor.nodes(editor, nodeOptions)\n  // run the generator to find the nearest match\n  const node = nodeGenerator.next()\n  // if it finds a match then return true to indicate the block is currently\n  // active\n  while (!node.done) {\n    return true\n  }\n  // if it doesn't find a match, then the generator has yielded its last value\n  // meaning that it did not find a match for this block type\n  return false\n}\n\n// unwrap the link from the current selection\nconst unwrapLink = (editor: Editor) => {\n  Transforms.unwrapNodes(editor, nodeOptions)\n}\n\n// wrapLink has all of the logic for wrapping a given selection with\n// an inline link node\nconst wrapLink = (editor: Editor, url: string) => {\n  // first, if the selection is already a link then we want to unwrap it\n  if (isLinkActive(editor)) {\n    unwrapLink(editor)\n  }\n\n  // add variable to determine if the given selection is collapsed;\n  // this means that the user does not have any text actively selected\n  const { selection } = editor\n  const isCollapsed = selection && Range.isCollapsed(selection)\n\n  // define the link data structure\n  // if it is collapsed then we add the url as the text portion of the link\n  const link = {\n    type: types.link,\n    url,\n    children: isCollapsed ? [{ text: url }] : [],\n  }\n\n  if (isCollapsed) {\n    // if there isn't a range selected, insert a new node\n    Transforms.insertNodes(editor, link)\n  } else {\n    // otherwise wrap the node with the link data\n    // split is necessary to only wrap the selection and not the entire block\n    Transforms.wrapNodes(editor, link, { split: true })\n    // and collapse the selection to the end of the node\n    Transforms.collapse(editor, { edge: \"end\" })\n  }\n}\n\nconst insertLink = (editor: Editor, url: string) => {\n  // only insert a link if there is a selection in the editor\n  if (editor.selection) {\n    wrapLink(editor, url)\n  }\n}\n\ntype Props = {\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * LinkButton is a button specifically for adding links.\n */\nconst LinkButton = ({ icon }: Props) => {\n  const editor = useSlate()\n\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    const url = window.prompt(\"Enter the URL of the link:\")\n    if (!url) return\n    insertLink(editor, url)\n  }\n\n  return (\n    <IconButton size=\"small\" aria-label=\"link-button\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default LinkButton\n","const types = {\n  // marks\n  bold: \"bold\",\n  italic: \"italic\",\n  underline: \"underline\",\n  strikethrough: \"strikethrough\",\n  subscript: \"subscript\",\n  superscript: \"superscript\",\n  // inline\n  link: \"link\",\n  // blocks\n  paragraph: \"paragraph\",\n  h1: \"h1\",\n  h2: \"h2\",\n  h3: \"h3\",\n}\n\nconst alignments = {\n  left: \"left\",\n  center: \"center\",\n  right: \"right\",\n  justify: \"justify\",\n}\n\nexport { types, alignments }\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst BoldIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default BoldIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst ItalicIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z\" />\n    </SvgIcon>\n  )\n}\n\nexport default ItalicIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst StrikethroughIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M10 19h4v-3h-4v3zM5 4v3h5v3h4V7h5V4H5zM3 14h18v-2H3v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default StrikethroughIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst SubscriptIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M22,18h-2v1h3v1h-4v-2c0-0.55,0.45-1,1-1h2v-1h-3v-1h3c0.55,0,1,0.45,1,1v1C23,17.55,22.55,18,22,18z M5.88,18h2.66 l3.4-5.42h0.12l3.4,5.42h2.66l-4.65-7.27L17.81,4h-2.68l-3.07,4.99h-0.12L8.85,4H6.19l4.32,6.73L5.88,18z\" />\n    </SvgIcon>\n  )\n}\n\nexport default SubscriptIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst SuperscriptIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M22,7h-2v1h3v1h-4V7c0-0.55,0.45-1,1-1h2V5h-3V4h3c0.55,0,1,0.45,1,1v1C23,6.55,22.55,7,22,7z M5.88,20h2.66l3.4-5.42h0.12 l3.4,5.42h2.66l-4.65-7.27L17.81,6h-2.68l-3.07,4.99h-0.12L8.85,6H6.19l4.32,6.73L5.88,20z\" />\n    </SvgIcon>\n  )\n}\n\nexport default SuperscriptIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst UnderlinedIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default UnderlinedIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H1Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14h-2V9h-2V7h4v10z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H1Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H2Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 8c0 1.11-.9 2-2 2h-2v2h4v2H9v-4c0-1.11.9-2 2-2h2V9H9V7h4c1.1 0 2 .89 2 2v2z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H2Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst H3Icon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M.01 0h24v24h-24z\" fill=\"none\" />\n      <path d=\"M19.01 3h-14c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-4 7.5c0 .83-.67 1.5-1.5 1.5.83 0 1.5.67 1.5 1.5V15c0 1.11-.9 2-2 2h-4v-2h4v-2h-2v-2h2V9h-4V7h4c1.1 0 2 .89 2 2v1.5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default H3Icon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst LinkIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\" />\n    </SvgIcon>\n  )\n}\n\nexport default LinkIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignLeftIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignLeftIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignCenterIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignCenterIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignRightIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignRightIcon\n","import React from \"react\"\nimport SvgIcon from \"@material-ui/core/SvgIcon\"\n\nconst AlignJustifyIcon = () => {\n  return (\n    <SvgIcon>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      <path d=\"M3 21h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18V7H3v2zm0-6v2h18V3H3z\" />\n    </SvgIcon>\n  )\n}\n\nexport default AlignJustifyIcon\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Divider from \"@material-ui/core/Divider\"\nimport MarkButton from \"./buttons/MarkButton\"\nimport BlockButton from \"./buttons/BlockButton\"\nimport AlignButton from \"./buttons/AlignButton\"\nimport LinkButton from \"./buttons/LinkButton\"\n// mark icons\nimport BoldIcon from \"./icons/BoldIcon\"\nimport ItalicIcon from \"./icons/ItalicIcon\"\nimport StrikethroughIcon from \"./icons/StrikethroughIcon\"\nimport SubscriptIcon from \"./icons/SubscriptIcon\"\nimport SuperscriptIcon from \"./icons/SuperscriptIcon\"\nimport UnderlinedIcon from \"./icons/UnderlinedIcon\"\n// block icons\nimport H1Icon from \"./icons/H1Icon\"\nimport H2Icon from \"./icons/H2Icon\"\nimport H3Icon from \"./icons/H3Icon\"\nimport LinkIcon from \"./icons/LinkIcon\"\n// align icons\nimport AlignLeftIcon from \"./icons/AlignLeftIcon\"\nimport AlignCenterIcon from \"./icons/AlignCenterIcon\"\nimport AlignRightIcon from \"./icons/AlignRightIcon\"\nimport AlignJustifyIcon from \"./icons/AlignJustifyIcon\"\n// types\nimport { types, alignments } from \"../constants/types\"\n\nconst useStyles = makeStyles({\n  divider: {\n    marginLeft: \"4px\",\n    marginRight: \"4px\",\n  },\n})\n\n/**\n * Toolbar is the display for the editor toolbar.\n */\nconst EditorToolbar = () => {\n  const classes = useStyles()\n\n  return (\n    <AppBar color=\"default\" position=\"static\">\n      <Toolbar disableGutters variant=\"dense\">\n        <MarkButton format={types.bold} icon={<BoldIcon />} />\n        <MarkButton format={types.italic} icon={<ItalicIcon />} />\n        <MarkButton format={types.underline} icon={<UnderlinedIcon />} />\n        <MarkButton format={types.strikethrough} icon={<StrikethroughIcon />} />\n        <MarkButton format={types.subscript} icon={<SubscriptIcon />} />\n        <MarkButton format={types.superscript} icon={<SuperscriptIcon />} />\n        <Divider className={classes.divider} orientation=\"vertical\" flexItem />\n        <BlockButton format={types.h1} icon={<H1Icon />} />\n        <BlockButton format={types.h2} icon={<H2Icon />} />\n        <BlockButton format={types.h3} icon={<H3Icon />} />\n        <LinkButton icon={<LinkIcon />} />\n        <Divider className={classes.divider} orientation=\"vertical\" flexItem />\n        <AlignButton align={alignments.left} icon={<AlignLeftIcon />} />\n        <AlignButton align={alignments.center} icon={<AlignCenterIcon />} />\n        <AlignButton align={alignments.right} icon={<AlignRightIcon />} />\n        <AlignButton align={alignments.justify} icon={<AlignJustifyIcon />} />\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default EditorToolbar\n","import React from \"react\"\nimport { RenderElementProps } from \"slate-react\"\nimport Typography, { TypographyProps } from \"@material-ui/core/Typography\"\nimport { types } from \"../constants/types\"\n\ninterface ElementProps extends RenderElementProps {\n  element: {\n    /** Type of element to render */\n    type: string\n    /** Text alignment (left, center, right, justify) */\n    align?: TypographyProps[\"align\"]\n    /** URL used for links */\n    url?: string\n    /** Any children to render */\n    children: any\n  }\n}\n\n/**\n * Element is used to render blocks based on a given type.\n */\nconst Element = ({ attributes, children, element }: ElementProps) => {\n  const { type, align = \"left\", url } = element\n\n  switch (type) {\n    case types.h1:\n      return (\n        <Typography variant=\"h1\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.h2:\n      return (\n        <Typography variant=\"h2\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.h3:\n      return (\n        <Typography variant=\"h3\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n    case types.link:\n      return (\n        <a href={url} {...attributes}>\n          {children}\n        </a>\n      )\n    default:\n      return (\n        <Typography component=\"p\" variant=\"body1\" align={align} {...attributes}>\n          {children}\n        </Typography>\n      )\n  }\n}\n\nexport default Element\n","import React from \"react\"\nimport { RenderLeafProps } from \"slate-react\"\n\n/**\n * Leaf is used to render text based on a given style.\n *\n * We need to use standard if conditionals and not if/else if because\n * a leaf can have multiple matching properties. If a leaf is both bold\n * and italic, for example, then ultimately this component would render:\n *\n * <span {...attributes}><strong><em>{children}</em></strong></span>\n */\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  if (leaf.strikethrough) {\n    children = <s>{children}</s>\n  }\n\n  if (leaf.subscript) {\n    children = <sub>{children}</sub>\n  }\n\n  if (leaf.superscript) {\n    children = <sup>{children}</sup>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nexport default Leaf\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport { createEditor, Node } from \"slate\"\nimport { Slate, Editable, withReact } from \"slate-react\"\nimport Toolbar from \"./Toolbar\"\nimport Element from \"./Element\"\nimport Leaf from \"./Leaf\"\nimport withLinks from \"./plugins/withLinks\"\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [{ text: \"A line of text in a paragraph.\" }],\n  },\n]\n\n/**\n * PageEditor is the main editor component.\n */\nconst PageEditor = () => {\n  // create a slate editor object that won't change across renders\n  const editor = useMemo(() => withReact(withLinks(createEditor())), [])\n  // store the value of the editor\n  const [value, setValue] = useState<Node[]>(initialValue)\n  // render expected element based on type passed as props\n  // memoize this function for subsequent renders\n  const renderElement = useCallback((props) => <Element {...props} />, [])\n  // render expected leaf based on type (i.e. bold, italic, etc)\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, [])\n  console.log(value)\n  return (\n    <Slate editor={editor} value={value} onChange={(value) => setValue(value)}>\n      <Toolbar />\n      <Editable renderElement={renderElement} renderLeaf={renderLeaf} />\n    </Slate>\n  )\n}\n\nexport default PageEditor\n","import { Editor } from \"slate\"\nimport { types } from \"../../constants/types\"\n\nconst withLinks = (editor: Editor) => {\n  const { isInline } = editor\n\n  editor.isInline = (element) => {\n    if (element.type === types.link) {\n      return true\n    }\n    return isInline(editor)\n  }\n\n  return editor\n}\n\nexport default withLinks\n"],"names":["MarkButton","format","icon","editor","useSlate","React","IconButton","size","onClick","event","preventDefault","marks","Editor","isMarkActive","addMark","removeMark","toggleMark","BlockButton","isActive","node","nodes","match","n","isEditor","SlateElement","isElement","type","next","done","isBlockActive","Transforms","setNodes","toggleBlock","AlignButton","align","isAlignActive","toggleAlign","nodeOptions","LinkButton","url","window","prompt","selection","isLinkActive","unwrapNodes","unwrapLink","isCollapsed","Range","link","children","text","insertNodes","wrapNodes","split","collapse","edge","wrapLink","insertLink","BoldIcon","SvgIcon","d","fill","ItalicIcon","StrikethroughIcon","SubscriptIcon","SuperscriptIcon","UnderlinedIcon","H1Icon","H2Icon","H3Icon","LinkIcon","AlignLeftIcon","AlignCenterIcon","AlignRightIcon","AlignJustifyIcon","useStyles","makeStyles","divider","marginLeft","marginRight","EditorToolbar","classes","AppBar","color","position","Toolbar","disableGutters","variant","Divider","className","orientation","flexItem","Element","attributes","element","Typography","href","component","Leaf","leaf","bold","italic","underline","strikethrough","subscript","superscript","initialValue","useMemo","withReact","isInline","withLinks","createEditor","useState","value","setValue","renderElement","useCallback","props","renderLeaf","console","log","Slate","onChange","Editable"],"mappings":"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"}
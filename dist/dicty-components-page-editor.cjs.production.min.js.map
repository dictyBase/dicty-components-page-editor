{"version":3,"file":"dicty-components-page-editor.cjs.production.min.js","sources":["../src/components/buttons/MarkButton.tsx","../src/components/buttons/BlockButton.tsx","../src/Toolbar.tsx","../src/components/Element.tsx","../src/components/Leaf.tsx","../src/PageEditor.tsx"],"sourcesContent":["import React, { MouseEvent } from \"react\"\nimport { Editor } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { MarkFormat } from \"../../types\"\n\n/**\n * isMarkActive determines if the current text selection contains an\n * active mark\n */\nconst isMarkActive = (editor: ReactEditor, format: MarkFormat) => {\n  // get a list of marks from the selected text\n  const marks = Editor.marks(editor)\n\n  // if there are marks for specified format then the mark is active\n  if (marks && marks[format]) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/**\n * toggleMark will either remove or add a mark to the given text selection\n */\nconst toggleMark = (editor: ReactEditor, format: MarkFormat) => {\n  // first find if the selection's mark is currently active\n  const isActive = isMarkActive(editor, format)\n\n  // we either want to add or remove a mark based on whether it is currently active\n  if (isActive) {\n    Editor.removeMark(editor, format)\n  } else {\n    Editor.addMark(editor, format, true)\n  }\n}\n\ntype Props = {\n  /** Type of mark */\n  format: MarkFormat\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * MarkButton displays a button with associated click logic for toggling a mark.\n */\nconst MarkButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the mark within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleMark(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default MarkButton\n","import React, { MouseEvent } from \"react\"\nimport { Editor, Transforms, Element as SlateElement } from \"slate\"\nimport { useSlate, ReactEditor } from \"slate-react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport { BlockFormat } from \"../../types\"\n\n/**\n * PROCESS:\n *\n * 1. User clicks button\n * 2. We run generator function to find any matching nodes for that block type.\n * 3. If there are no matches (value == undefined) then the generator is done\n *    and we do not mark that block as active.\n * 4. If the block is not active, then we set the nodes to match that format type.\n * 5. If the generator does find a match, we mark that block as active for the\n *    first matching node.\n * 6. If the block is active, then we set the nodes back to the default type of\n *    'paragraph'.\n */\n\n/**\n * isBlockActive determines if the current text selection contains an active block\n */\nconst isBlockActive = (editor: ReactEditor, format: BlockFormat) => {\n  // Editor.nodes returns a generator that iterates through all of the editor's\n  // nodes. We are looking for matches for the selected format.\n  // https://github.com/ianstormtaylor/slate/blob/master/packages/slate/src/interfaces/node.ts#L467\n  const nodeGenerator = Editor.nodes(editor, {\n    match: (n) =>\n      !Editor.isEditor(n) && SlateElement.isElement(n) && n.type === format,\n  })\n\n  // run the generator to find the nearest match\n  // then return true if this is the last value\n  const node = nodeGenerator.next()\n  while (!node.done) {\n    return true\n  }\n  return false\n}\n\n/**\n * toggleBlock will set the appropriate nodes for the given selection\n */\nconst toggleBlock = (editor: ReactEditor, format: BlockFormat) => {\n  // first find if the selected block is currently active\n  const isActive = isBlockActive(editor, format)\n\n  // Transforms provides helper functions to interact with the document.\n  // setNodes is used to set properties at the specified location.\n  // Here we are setting the type as paragraph if the block is active for the\n  // given format, otherwise we set it as the format.\n  Transforms.setNodes(editor, {\n    type: isActive ? \"paragraph\" : format,\n  })\n}\n\ntype Props = {\n  /** Type of block */\n  format: BlockFormat\n  /** Icon to display in button */\n  icon: JSX.Element\n}\n\n/**\n * BlockButton displays a button with associated click logic for toggling a block.\n */\nconst BlockButton = ({ format, icon }: Props) => {\n  const editor = useSlate()\n\n  // when button is clicked, toggle the mark within the editor\n  const handleClick = (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    toggleBlock(editor, format)\n  }\n\n  return (\n    <IconButton size=\"small\" onClick={handleClick}>\n      {icon}\n    </IconButton>\n  )\n}\n\nexport default BlockButton\n","import React from \"react\"\nimport MarkButton from \"./components/buttons/MarkButton\"\nimport BlockButton from \"./components/buttons/BlockButton\"\nimport FormatBoldIcon from \"@material-ui/icons/FormatBold\"\nimport FormatItalicIcon from \"@material-ui/icons/FormatItalic\"\nimport FormatUnderlinedIcon from \"@material-ui/icons/FormatUnderlined\"\nimport FormatStrikethroughIcon from \"@material-ui/icons/FormatStrikethrough\"\nimport H1Icon from \"@material-ui/icons/LooksOne\"\nimport H2Icon from \"@material-ui/icons/LooksTwo\"\n\n/**\n * Toolbar is the display for the editor toolbar.\n */\nconst Toolbar = () => {\n  return (\n    <div>\n      <MarkButton format=\"bold\" icon={<FormatBoldIcon />} />\n      <MarkButton format=\"italic\" icon={<FormatItalicIcon />} />\n      <MarkButton format=\"underline\" icon={<FormatUnderlinedIcon />} />\n      <MarkButton format=\"strikethrough\" icon={<FormatStrikethroughIcon />} />\n      <BlockButton format=\"h1\" icon={<H1Icon />} />\n      <BlockButton format=\"h2\" icon={<H2Icon />} />\n    </div>\n  )\n}\n\nexport default Toolbar\n","import React from \"react\"\nimport { RenderElementProps } from \"slate-react\"\nimport Typography from \"@material-ui/core/Typography\"\n\n/**\n * Element is used to render blocks based on a given type.\n */\nconst Element = ({ attributes, children, element }: RenderElementProps) => {\n  switch (element.type) {\n    case \"h1\":\n      return (\n        <Typography variant=\"h1\" {...attributes}>\n          {children}\n        </Typography>\n      )\n    case \"h2\":\n      return (\n        <Typography variant=\"h2\" {...attributes}>\n          {children}\n        </Typography>\n      )\n    default:\n      return (\n        <Typography component=\"p\" variant=\"body1\" {...attributes}>\n          {children}\n        </Typography>\n      )\n  }\n}\n\nexport default Element\n","import React from \"react\"\nimport { RenderLeafProps } from \"slate-react\"\n\n/**\n * Leaf is used to render text based on a given style.\n */\nconst Leaf = ({ attributes, children, leaf }: RenderLeafProps) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  if (leaf.strikethrough) {\n    children = <s>{children}</s>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nexport default Leaf\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport { createEditor, Node } from \"slate\"\nimport { Slate, Editable, withReact } from \"slate-react\"\nimport Toolbar from \"./Toolbar\"\nimport Element from \"./components/Element\"\nimport Leaf from \"./components/Leaf\"\n\nconst initialValue = [\n  {\n    type: \"paragraph\",\n    children: [{ text: \"A line of text in a paragraph.\" }],\n  },\n]\n\n/**\n * PageEditor is the main editor component.\n */\nconst PageEditor = () => {\n  // create a slate editor object that won't change across renders\n  const editor = useMemo(() => withReact(createEditor()), [])\n  // store the value of the editor\n  const [value, setValue] = useState<Node[]>(initialValue)\n  // render expected element based on type passed as props\n  // memoize this function for subsequent renders\n  const renderElement = useCallback((props) => <Element {...props} />, [])\n  // render expected leaf based on type (i.e. bold, italic, etc)\n  const renderLeaf = useCallback((props) => <Leaf {...props} />, [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={(value) => setValue(value)}>\n      <Toolbar />\n      <Editable renderElement={renderElement} renderLeaf={renderLeaf} />\n    </Slate>\n  )\n}\n\nexport default PageEditor\n"],"names":["MarkButton","format","icon","editor","useSlate","React","IconButton","size","onClick","event","preventDefault","marks","Editor","isMarkActive","addMark","removeMark","toggleMark","BlockButton","isActive","node","nodes","match","n","isEditor","SlateElement","isElement","type","next","done","isBlockActive","Transforms","setNodes","toggleBlock","Toolbar","FormatBoldIcon","FormatItalicIcon","FormatUnderlinedIcon","FormatStrikethroughIcon","H1Icon","H2Icon","Element","attributes","children","element","Typography","variant","component","Leaf","leaf","bold","italic","underline","strikethrough","initialValue","text","useMemo","withReact","createEditor","useState","value","setValue","renderElement","useCallback","props","renderLeaf","Slate","onChange","Editable"],"mappings":"+kBA+CMA,EAAa,gBAAGC,IAAAA,OAAQC,IAAAA,KACtBC,EAASC,oBASbC,gBAACC,GAAWC,KAAK,QAAQC,QANP,SAACC,GACnBA,EAAMC,iBA3BS,SAACP,EAAqBF,IAfpB,SAACE,EAAqBF,OAEnCU,EAAQC,SAAOD,MAAMR,YAGvBQ,IAASA,EAAMV,IAYFY,CAAaV,EAAQF,GAMpCW,SAAOE,QAAQX,EAAQF,GAAQ,GAF/BW,SAAOG,WAAWZ,EAAQF,GAsB1Be,CAAWb,EAAQF,KAKhBC,ICSDe,EAAc,gBAAGhB,IAAAA,OAAQC,IAAAA,KACvBC,EAASC,oBASbC,gBAACC,GAAWC,KAAK,QAAQC,QANP,SAACC,GACnBA,EAAMC,iBA5BU,SAACP,EAAqBF,OAElCiB,EAvBc,SAACf,EAAqBF,WAWpCkB,EAPgBP,SAAOQ,MAAMjB,EAAQ,CACzCkB,MAAO,SAACC,UACLV,SAAOW,SAASD,IAAME,UAAaC,UAAUH,IAAMA,EAAEI,OAASzB,KAKxC0B,QACnBR,EAAKS,aACJ,SAEF,EAQUC,CAAc1B,EAAQF,GAMvC6B,aAAWC,SAAS5B,EAAQ,CAC1BuB,KAAMR,EAAW,YAAcjB,IAoB/B+B,CAAY7B,EAAQF,KAKjBC,ICjED+B,EAAU,kBAEZ5B,2BACEA,gBAACL,GAAWC,OAAO,OAAOC,KAAMG,gBAAC6B,UACjC7B,gBAACL,GAAWC,OAAO,SAASC,KAAMG,gBAAC8B,UACnC9B,gBAACL,GAAWC,OAAO,YAAYC,KAAMG,gBAAC+B,UACtC/B,gBAACL,GAAWC,OAAO,gBAAgBC,KAAMG,gBAACgC,UAC1ChC,gBAACY,GAAYhB,OAAO,KAAKC,KAAMG,gBAACiC,UAChCjC,gBAACY,GAAYhB,OAAO,KAAKC,KAAMG,gBAACkC,YCdhCC,EAAU,gBAAGC,IAAAA,WAAYC,IAAAA,kBAAUC,QACvBjB,UACT,YAEDrB,gBAACuC,iBAAWC,QAAQ,MAASJ,GAC1BC,OAGF,YAEDrC,gBAACuC,iBAAWC,QAAQ,MAASJ,GAC1BC,kBAKHrC,gBAACuC,iBAAWE,UAAU,IAAID,QAAQ,SAAYJ,GAC3CC,KClBLK,EAAO,gBAAGN,IAAAA,WAAYC,IAAAA,SAAUM,IAAAA,YAChCA,EAAKC,OACPP,EAAWrC,8BAASqC,IAGlBM,EAAKE,SACPR,EAAWrC,0BAAKqC,IAGdM,EAAKG,YACPT,EAAWrC,yBAAIqC,IAGbM,EAAKI,gBACPV,EAAWrC,yBAAIqC,IAGVrC,wCAAUoC,GAAaC,IChB1BW,EAAe,CACnB,CACE3B,KAAM,YACNgB,SAAU,CAAC,CAAEY,KAAM,wDAOJ,eAEXnD,EAASoD,WAAQ,kBAAMC,YAAUC,oBAAiB,MAE9BC,WAAiBL,GAApCM,OAAOC,OAGRC,EAAgBC,eAAY,SAACC,UAAU1D,gBAACmC,mBAAYuB,MAAW,IAE/DC,EAAaF,eAAY,SAACC,UAAU1D,gBAAC0C,mBAASgB,MAAW,WAG7D1D,gBAAC4D,SAAM9D,OAAQA,EAAQwD,MAAOA,EAAOO,SAAU,SAACP,UAAUC,EAASD,KACjEtD,gBAAC4B,QACD5B,gBAAC8D,YAASN,cAAeA,EAAeG,WAAYA"}